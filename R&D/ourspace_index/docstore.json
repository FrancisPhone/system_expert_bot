{"docstore/metadata": {"69c88887-b7e1-431a-a7d8-010a994c4b14": {"doc_hash": "58f47d5eeda45ed6b65036f3d472c79888533c66f9db72b268bc867181e4768f"}, "bc912c52-df5b-4ba7-9242-aee3fb27d2f2": {"doc_hash": "8f37c3c87140b5c32ac5b24e1d370ea3ad407d5fcb90468ec518ea411b08f359"}, "3c5e369f-881b-43a1-9a44-d119617fcd43": {"doc_hash": "727a40730d63ab7aaedff11f067806b0f21c3ad27b5d5726fb50a6ed51c30335"}, "29348aa4-b3d2-47e1-8c48-b66ed077fff9": {"doc_hash": "bfde41bb0c292b9c9ea7a4e0ea2e3c04a9f87b674679fe487b10151ae434179a"}, "551bc74d-be47-49de-96f5-eed472d63d4f": {"doc_hash": "0636379dd96917ad51fcfcc2f14ab27192608e1eb726d180522fa8d77cffca84"}, "3a1fe2b5-6629-4406-9765-6684f7264e66": {"doc_hash": "81e7005401ed86f67c0f1c7565e5155f80a4ad3b425ab361da15512dcf2ccf9a"}, "d0df5633-52a2-45a4-978d-8417f9fdca26": {"doc_hash": "fc11343a024fc3c94a7130a285e78ba9c243083129b4b620f75f1f737f795a58"}, "72e4f38d-dc31-45ac-9e2e-fbf5ca97b5f7": {"doc_hash": "841f4d24311f5c4c433269cb4b023242505f205ab8fc12b8b436f53ab197c378"}, "df639b0c-6314-432b-a12a-f12399dc5202": {"doc_hash": "47177dbd7ee114503317bc28b2172be71a99452916e3e17ab4481058fa7b64bd"}, "8bcfed0c-7999-4db3-8fbd-1ffd24c48dce": {"doc_hash": "67b65231013d05d141545e59ca4cb806daa2f9061b8e1dc5de2d801bf6828460"}, "1aecb44f-a1e8-4162-b4db-a5a6f07c05e9": {"doc_hash": "55416bbcd7498692cb937a126e770991f685fb60f943e517e31099c2432bff96"}, "dfa9168f-b92d-4d4b-8a52-f1d1c1dd2a61": {"doc_hash": "eeefa732de87723d4f5e7216ed50a26af80e0837da9d44455a0700207695024a"}, "8010df7a-68b8-4199-ad04-c24767c7bb37": {"doc_hash": "07e89e8a687d4951f1be33b7070f935d0e11c534526a67a7ca65869880873242"}, "915569a2-cf82-44ec-961a-36ccac3a8f26": {"doc_hash": "6fab783d3b47bcb98c1ebd10a714ea7d55336bb5d6c9a79724b51d068c17d487"}, "06a0734e-33fd-40b5-9a43-4a045b05e80c": {"doc_hash": "58199cfacdaf74bffac700171b1e718c999cd9f5fabccb327190b4d47ae60168"}, "9eda0a4e-bedf-4f6b-a9a0-b29d50e7f020": {"doc_hash": "41c734bb7ac3925327952b46baaaada8d67fb40c50ec438f984d1e39ae9896f1"}, "78f0fd59-f6c8-437a-afdc-2bba713ceff7": {"doc_hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640"}, "7a0a5b25-e669-456b-ba1b-cb2c0ad85cb4": {"doc_hash": "f2925fb8cfef4ec9e96667ea974f6386b095e4db86ae0d6896d52116271e104a", "ref_doc_id": "69c88887-b7e1-431a-a7d8-010a994c4b14"}, "48ff6902-1cc6-48c1-a361-7494d46cca66": {"doc_hash": "7a81a3f2fcaec906651604312446008fd60721de9bd39df63cd0074ffe92bd9b", "ref_doc_id": "bc912c52-df5b-4ba7-9242-aee3fb27d2f2"}, "d2304d83-b2c0-4670-a83a-e8332e48e630": {"doc_hash": "d089fa30890c5d24165967d9257324f5682805356e87d640e83e6ce229bb1c2c", "ref_doc_id": "3c5e369f-881b-43a1-9a44-d119617fcd43"}, "f7c37569-1321-4a5b-94d8-d53b80781447": {"doc_hash": "cea9dda6ebbb60bc2215a5c2d24f48dc272d25687831f45a1cdc8036bf1c41d5", "ref_doc_id": "29348aa4-b3d2-47e1-8c48-b66ed077fff9"}, "1882b4be-79f8-4aec-8abb-868072e7eff7": {"doc_hash": "6908beaacd0a26bf239389d2073327a50612583d65e49cb6a80c709d1793bd0b", "ref_doc_id": "551bc74d-be47-49de-96f5-eed472d63d4f"}, "848fde15-a655-404a-98ac-f05b794cb82d": {"doc_hash": "60d15118616c3f0ad4ba8e1ab21ec86984fb68cf1e1447b47920db25e8ab7641", "ref_doc_id": "3a1fe2b5-6629-4406-9765-6684f7264e66"}, "3b2912cd-089f-411e-b84b-d0c8be79ddbb": {"doc_hash": "f23a6ccd5e2eee2f14847316e608e73029f7397c64d4c12cb1bc5f9cf1037c75", "ref_doc_id": "d0df5633-52a2-45a4-978d-8417f9fdca26"}, "3fd01c27-539a-4213-ae55-1cae12566f52": {"doc_hash": "ab8541dac3c7febfaccf9c5b341f1da3e0dcb9037cb8592be04a15cf611b1082", "ref_doc_id": "72e4f38d-dc31-45ac-9e2e-fbf5ca97b5f7"}, "b708c3f9-cebf-4b0e-925d-1479156bd705": {"doc_hash": "f91604a91e8342a466e55066d1fec58a4d850b300ff78777499436410519be46", "ref_doc_id": "df639b0c-6314-432b-a12a-f12399dc5202"}, "17a3a7df-0590-4ac0-851a-499f82078fe4": {"doc_hash": "c3fbfc16f96b035487ff55cf00b7fbb694b241b1617eec040067b8f104d12fcb", "ref_doc_id": "8bcfed0c-7999-4db3-8fbd-1ffd24c48dce"}, "30f4cf98-6429-4a5b-9c45-20e660377943": {"doc_hash": "519dc5f852d22281ab9c6a017374cb5154eff1ae44ed52ca5d70368c58dfb13e", "ref_doc_id": "1aecb44f-a1e8-4162-b4db-a5a6f07c05e9"}, "21725773-5825-4f02-882a-f3dd0ac2335f": {"doc_hash": "713574dc06f193fada321e5b455cdff1231bc965fafa139c8f92774503c811fa", "ref_doc_id": "dfa9168f-b92d-4d4b-8a52-f1d1c1dd2a61"}, "31fc4c62-15c9-4568-b8b3-ec794c2ffa20": {"doc_hash": "84b8f9acbb2535409a3b23074027d9d8b7e5f0ed0d64829db2815c9dff90b64e", "ref_doc_id": "8010df7a-68b8-4199-ad04-c24767c7bb37"}, "7126e381-3df7-48cd-947e-f1af23786aff": {"doc_hash": "484403200ab74069fbd5aa1b4f845fa212590565b01dc0a8467a1b39925b1d7b", "ref_doc_id": "915569a2-cf82-44ec-961a-36ccac3a8f26"}, "15549607-dda2-47dc-8508-16cdf4e61c68": {"doc_hash": "4b404634833cfc2b5a4376701786b280a22e4bab4b04981930c818ef0c952ce6", "ref_doc_id": "06a0734e-33fd-40b5-9a43-4a045b05e80c"}, "0e0c817a-d462-4c11-ba20-2d19937ab6d9": {"doc_hash": "38f0d86cc1b37d395953fdb8b8477117f86d4f686ac96a5ec5fb81661ae50407", "ref_doc_id": "9eda0a4e-bedf-4f6b-a9a0-b29d50e7f020"}, "c039a98c-344f-4be4-a3b0-24b695725a9c": {"doc_hash": "97958216f5c6c1a9b30c644039e3b25402ff2ae43402d97fd16944d491c4a3bf", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "e6157ca8-3943-4a02-9737-f59d907e8197": {"doc_hash": "5f7cc63d17b63ad3f6aec613ca55e26a467e6b6a8311a0207838814eae1ea88f", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "1e1ff4d1-4d43-442d-a25e-6f1243a6712f": {"doc_hash": "2bf2d730c33af33481355d9f23b5adf40e3cbfac48e2b1df42ee29d7777c4cff", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "62c6507d-1a3e-4e88-8c40-d5ec3131116a": {"doc_hash": "0ff340358e3549004869aefd0bc2a10e5b4604b8ad0924e2009677f313e62956", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "a02fd073-cce9-47df-adb9-1d4e349b0829": {"doc_hash": "2fc077cf996cbe311ec88484a6b81c34ab22309c3964852b3090c9b887174b09", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "c1d61768-560c-4f6f-b709-f0a87ee50586": {"doc_hash": "bc5375c86bb892228154f5710b2f297344d87243ecb83daec258e239cbf0f489", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "f7d63f86-7bda-4432-bcd0-9095eff12693": {"doc_hash": "88f3a1113013e3a60fee3beee881caf4786a06ef7f3b40a01bc5e63691473c0f", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "86459bf3-4778-41a9-a2c1-e49ca44eb249": {"doc_hash": "921b0b5c74d6160963eea44a18634bd42d16289f0e9f117fcdfbdda025524a52", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "286529a5-e6bc-4702-b8ab-a9aa055d4e87": {"doc_hash": "c7171a291bdfd69c29c677c1794df7277f38979ce668b192d5d788f1567380ea", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "f9b31c75-a8e8-48a6-a7c2-9b7bd6a88182": {"doc_hash": "00c1e0e75a069962097d045d1ab7eeefb73c4a3f4b63500e54dc3adfb82a8a56", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}, "86c790dc-b97f-4992-b5e2-43a1e7a245da": {"doc_hash": "46b81dca3959e0b0d71d12f933c70df11d400c0a09c6e090dd9abfb007c7a8aa", "ref_doc_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7"}}, "docstore/data": {"7a0a5b25-e669-456b-ba1b-cb2c0ad85cb4": {"__data__": {"id_": "7a0a5b25-e669-456b-ba1b-cb2c0ad85cb4", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\1.txt", "file_name": "1.txt", "file_type": "text/plain", "file_size": 3459, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "69c88887-b7e1-431a-a7d8-010a994c4b14", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\1.txt", "file_name": "1.txt", "file_type": "text/plain", "file_size": 3459, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "58f47d5eeda45ed6b65036f3d472c79888533c66f9db72b268bc867181e4768f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_BookSpace`**\n=====================================================\n\n### 1. Overview\nThe `sp_BookSpace` SQL procedure is designed to book a space in a database for a specific customer. It takes in several parameters, including the customer ID, space ID, start and end times, booking date, and a remark. The procedure calculates the total price based on the duration of the booking and inserts a new record into the `booking` table.\n\n### 2. Input\nThe input parameters for the `sp_BookSpace` procedure are:\n\n* `cid`: The ID of the customer booking the space (INT)\n* `sid`: The ID of the space being booked (INT)\n* `startTime`: The start time of the booking (TIMESTAMP)\n* `endTime`: The end time of the booking (TIMESTAMP)\n* `bookingDate`: The date the booking is made (TIMESTAMP)\n* `remark`: A text field for any additional remarks or comments (TEXT)\n\n### 3. Output\nThe expected output of the `sp_BookSpace` procedure is a new record inserted into the `booking` table with the following columns:\n\n* `cid`: The ID of the customer booking the space\n* `sid`: The ID of the space being booked\n* `bookingDate`: The date the booking is made\n* `totalDuration`: The total duration of the booking in hours\n* `startTime`: The start time of the booking\n* `endTime`: The end time of the booking\n* `spacePrice`: The total price of the booking\n* `status`: The status of the booking (initially set to 'booked')\n* `remark`: The text field for any additional remarks or comments\n* `createdAt` and `updatedAt`: Timestamps for when the record was created and last updated\n\n### 4. Tables\nThe `sp_BookSpace` procedure uses the following tables:\n\n* `space`: A table containing information about available spaces, including their hourly rate, half-day rate, and full-day rate.\n* `booking`: A table containing information about bookings, including the customer ID, space ID, booking date, start and end times, total price, status, and remarks.\n\n### 5. Logic\nThe logic of the `sp_BookSpace` procedure is as follows:\n\n1. Calculate the duration of the booking in hours using the `TIMESTAMPDIFF` function.\n2. Determine the price of the booking based on the duration:\n\t* If the duration is less than 12 hours, the price is calculated as the hourly rate multiplied by the duration.\n\t* If the duration is between 12 and 24 hours, the price is calculated as the hourly rate multiplied by the duration minus 12 hours, plus the half-day rate.\n\t* If the duration is more than 24 hours, the price is calculated as the full-day rate multiplied by the duration.\n3. Set the status of the booking to 'booked'.\n4. Insert a new record into the `booking` table with the calculated price and other relevant information.\n\n### 6. Operations\nThe `sp_BookSpace` procedure performs the following operations:\n\n* Read: Reads data from the `space` table to calculate the price of the booking.\n* Write: Inserts a new record into the `booking` table.\n* Update: Updates the `status` column of the new record in the `booking` table to 'booked'.\n\n### 7. Use Case\nThe `sp_BookSpace` procedure can be used in the following use cases:\n\n* Booking a space for a customer: Call the procedure with the customer ID, space ID, start and end times, booking date, and remark.\n* Updating the status of a booking: Update the `status` column of the corresponding record in the `booking` table.\n* Retrieving booking information: Query the `booking` table to retrieve information about a specific booking.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3459, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48ff6902-1cc6-48c1-a361-7494d46cca66": {"__data__": {"id_": "48ff6902-1cc6-48c1-a361-7494d46cca66", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\2.txt", "file_name": "2.txt", "file_type": "text/plain", "file_size": 2562, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc912c52-df5b-4ba7-9242-aee3fb27d2f2", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\2.txt", "file_name": "2.txt", "file_type": "text/plain", "file_size": 2562, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "8f37c3c87140b5c32ac5b24e1d370ea3ad407d5fcb90468ec518ea411b08f359", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_MonthlyRevenue`**\n=====================================================\n\n### 1. Overview\nThe `sp_MonthlyRevenue` SQL procedure calculates the monthly revenue for a given date range. It takes two input parameters: `FromDate` and `ToDate`, representing the start and end dates of the period for which the revenue is to be calculated.\n\n### 2. Input\nThe input parameters for the procedure are:\n\n* `FromDate`: A `DATETIME` value representing the start date of the period.\n* `ToDate`: A `DATETIME` value representing the end date of the period.\n\n### 3. Output\nThe expected output of the procedure is a list of monthly revenues for the given date range, including:\n\n* `Month`: The name of the month.\n* `Year`: The year.\n* `Space Price`: The total space price for the month.\n* `Platform Fee`: The total platform fee for the month.\n* `Total`: The total revenue for the month.\n\n### 4. Tables\nThe procedure uses the following tables:\n\n* `booking`: A table containing information about bookings.\n* `rent`: A table containing information about rents.\n\n### 5. Logic\nThe procedure uses the following logic:\n\n1. It selects the `Month`, `Year`, `spacePrice`, `sysFee`, and `total` columns from the `booking` table, joined with the `rent` table on the `bid` column.\n2. It filters the results to include only bookings with a status of 'completed' and an end time between the `FromDate` and `ToDate` parameters.\n3. It groups the results by `Month` and `Year`.\n4. It calculates the total space price, platform fee, and total revenue for each month by summing the corresponding columns.\n\n### 6. Operations\nThe procedure performs the following operations:\n\n* `SELECT`: Retrieves data from the `booking` and `rent` tables.\n* `INNER JOIN`: Combines data from the `booking` and `rent` tables based on the `bid` column.\n* `WHERE`: Filters the results to include only bookings with a status of 'completed' and an end time between the `FromDate` and `ToDate` parameters.\n* `GROUP BY`: Groups the results by `Month` and `Year`.\n* `SUM`: Calculates the total space price, platform fee, and total revenue for each month.\n\n### 7. Use Case\nThe use case for this procedure is to calculate the monthly revenue for a given date range. For example, to calculate the monthly revenue for the year 2025, you would call the procedure with the following parameters:\n\n```sql\nCALL sp_MonthlyRevenue('2025-01-01', '2025-12-31');\n```\n\nThis would return a list of monthly revenues for the year 2025, including the total space price, platform fee, and total revenue for each month.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2562, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d2304d83-b2c0-4670-a83a-e8332e48e630": {"__data__": {"id_": "d2304d83-b2c0-4670-a83a-e8332e48e630", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\3.txt", "file_name": "3.txt", "file_type": "text/plain", "file_size": 2625, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c5e369f-881b-43a1-9a44-d119617fcd43", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\3.txt", "file_name": "3.txt", "file_type": "text/plain", "file_size": 2625, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "727a40730d63ab7aaedff11f067806b0f21c3ad27b5d5726fb50a6ed51c30335", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_MostSpender`**\n=====================================================\n\n### 1. Overview\nThe `sp_MostSpender` SQL procedure is designed to identify the top `NumUsers` users who have spent the most amount on the platform within a specified date range (`FromDate` to `ToDate`). The procedure returns the user's name, days on the platform, total spent amount, and average spent amount per day.\n\n### 2. Input\nThe procedure takes three input parameters:\n\n* `FromDate`: The start date of the date range (DATETIME)\n* `ToDate`: The end date of the date range (DATETIME)\n* `NumUsers`: The number of top users to return (INT)\n\n### 3. Output\nThe procedure returns a result set with the following columns:\n\n* `User Name`: The name of the user\n* `Days On Platform`: The number of days the user has been on the platform (or 1 if the user joined on the current date)\n* `Total Spent Amount`: The total amount spent by the user\n* `Average Spent Amount Per Day`: The average amount spent by the user per day\n\n### 4. Tables\nThe procedure uses the following tables:\n\n* `payment` (p)\n* `booking` (b)\n* `user` (u)\n\n### 5. Logic\nThe procedure uses the following logic:\n\n1. It first selects the total amount spent by each user within the specified date range, grouping by user name and creation date.\n2. It then selects the top `NumUsers` users with the highest total amount spent, ordering the result set in descending order.\n3. For each user, it calculates the average spent amount per day by dividing the total amount spent by the number of days the user has been on the platform (or 1 if the user joined on the current date).\n\n### 6. Operations\nThe procedure performs the following operations:\n\n* `SELECT`: Retrieves data from the `payment`, `booking`, and `user` tables.\n* `GROUP BY`: Groups the result set by user name and creation date.\n* `ORDER BY`: Orders the result set in descending order by total amount spent.\n* `LIMIT`: Limits the result set to the top `NumUsers` users.\n* `CASE`: Calculates the number of days the user has been on the platform and the average spent amount per day.\n\n### 7. Use Case\nThe `sp_MostSpender` procedure can be used in the following scenarios:\n\n* Identifying the top spenders on the platform within a specific date range.\n* Analyzing user behavior and spending patterns.\n* Creating targeted marketing campaigns for high-value users.\n* Optimizing pricing strategies based on user spending habits.\n\n**Example Use Case:**\n```sql\nCALL sp_MostSpender('2022-01-01', '2022-12-31', 10);\n```\nThis would return the top 10 users who spent the most amount on the platform within the year 2022.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2625, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f7c37569-1321-4a5b-94d8-d53b80781447": {"__data__": {"id_": "f7c37569-1321-4a5b-94d8-d53b80781447", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\4.txt", "file_name": "4.txt", "file_type": "text/plain", "file_size": 2276, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29348aa4-b3d2-47e1-8c48-b66ed077fff9", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\4.txt", "file_name": "4.txt", "file_type": "text/plain", "file_size": 2276, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "bfde41bb0c292b9c9ea7a4e0ea2e3c04a9f87b674679fe487b10151ae434179a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_PayCharge`**\n=====================================================\n\n### 1. Overview\nThe `sp_PayCharge` SQL procedure is designed to record a payment made by a customer for a booking. It calculates the amount to be paid, updates the payment status, and inserts a new payment record into the `payment` table.\n\n### 2. Input\nThe procedure takes the following input parameters:\n\n* `rid`: The ID of the customer (integer)\n* `bid`: The ID of the booking (integer)\n* `paid`: The amount paid by the customer (float)\n* `transcId`: The transaction ID (string, 200 characters)\n* `bank`: The bank name (string, 200 characters)\n\n### 3. Output\nThe procedure does not return any output directly. However, it inserts a new payment record into the `payment` table, which can be retrieved using a SELECT statement.\n\n### 4. Tables\nThe procedure uses the following tables:\n\n* `booking`: The table containing booking information\n* `payment`: The table containing payment information\n\n### 5. Logic\nThe procedure follows these steps:\n\n1. Calculate the total amount to be paid for the booking by subtracting the sum of completed payments from the booking total.\n2. Calculate the unpaid amount by subtracting the paid amount from the total amount to be paid.\n3. Set the payment status to 'completed'.\n4. Insert a new payment record into the `payment` table with the calculated amounts and status.\n\n### 6. Operations\nThe procedure performs the following operations:\n\n* Read: Retrieves data from the `booking` and `payment` tables\n* Write: Inserts a new payment record into the `payment` table\n* Update: Updates the payment status (not explicitly, but the status is set to 'completed')\n\n### 7. Use Case\nThe `sp_PayCharge` procedure can be used in the following scenarios:\n\n* When a customer makes a payment for a booking, the procedure can be called to record the payment and update the payment status.\n* When a payment is made, the procedure can be used to calculate the remaining balance and update the payment status accordingly.\n\n**Example Use Case:**\n\n```sql\nCALL sp_PayCharge(1, 1, 50, 'txt0001', 'test');\n```\n\nThis call would record a payment of $50 for booking ID 1, with transaction ID 'txt0001' and bank name 'test'. The payment status would be set to 'completed'.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2276, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1882b4be-79f8-4aec-8abb-868072e7eff7": {"__data__": {"id_": "1882b4be-79f8-4aec-8abb-868072e7eff7", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\5.txt", "file_name": "5.txt", "file_type": "text/plain", "file_size": 2977, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "551bc74d-be47-49de-96f5-eed472d63d4f", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\5.txt", "file_name": "5.txt", "file_type": "text/plain", "file_size": 2977, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "0636379dd96917ad51fcfcc2f14ab27192608e1eb726d180522fa8d77cffca84", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_PopularDay`**\n=====================================================\n\n### 1. Overview\nThe `sp_PopularDay` SQL procedure is designed to retrieve the most popular days for bookings within a specified date range. It calculates the total number of bookings, total space price, and total platform fee for each day.\n\n### 2. Input\nThe procedure takes two input parameters:\n\n* `FromDate`: The start date of the range (inclusive).\n* `ToDate`: The end date of the range (inclusive).\n\nBoth parameters are of type `DATETIME`.\n\n### 3. Output\nThe procedure returns a result set with the following columns:\n\n* `Day`: The day of the week (e.g., 'Monday', 'Tuesday', etc.).\n* `Total Bookings`: The total number of bookings for each day.\n* `Space Price`: The total space price for each day.\n* `Platform Fee`: The total platform fee for each day.\n\nThe result set is ordered by the total number of bookings in descending order.\n\n### 4. Tables\nThe procedure uses two tables:\n\n* `booking`: The table containing booking information.\n* `rent`: The table containing rent information, which is joined with the `booking` table.\n\n### 5. Logic\nThe procedure follows these steps:\n\n1. It selects the `Day`, `id`, `spacePrice`, and `sysFee` columns from the `booking` table, joined with the `rent` table on the `bid` column.\n2. It filters the results to include only bookings with an `endTime` between the specified `FromDate` and `ToDate`, and a `status` of either 'completed' or 'booked'.\n3. It groups the results by the `Day` column.\n4. It calculates the total number of bookings, total space price, and total platform fee for each group.\n5. It orders the result set by the total number of bookings in descending order.\n\n### 6. Operations\nThe procedure performs the following operations:\n\n* `SELECT`: Retrieves data from the `booking` and `rent` tables.\n* `INNER JOIN`: Combines data from the `booking` and `rent` tables.\n* `WHERE`: Filters the results based on the specified date range and booking status.\n* `GROUP BY`: Groups the results by the `Day` column.\n* `COUNT`: Calculates the total number of bookings for each group.\n* `SUM`: Calculates the total space price and platform fee for each group.\n* `ORDER BY`: Orders the result set by the total number of bookings in descending order.\n\n### 7. Use Case\nThe `sp_PopularDay` procedure can be used to:\n\n* Analyze booking trends and identify the most popular days for bookings.\n* Determine the total revenue generated by bookings on each day.\n* Identify days with high platform fees and optimize pricing strategies accordingly.\n\n**Example Use Case:**\n\nSuppose you want to analyze booking trends for the year 2025. You can call the `sp_PopularDay` procedure with the following parameters:\n```sql\nCALL sp_PopularDay('2025-01-01', '2025-12-31');\n```\nThis will return a result set showing the most popular days for bookings in 2025, along with the total number of bookings, total space price, and total platform fee for each day.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2977, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "848fde15-a655-404a-98ac-f05b794cb82d": {"__data__": {"id_": "848fde15-a655-404a-98ac-f05b794cb82d", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\6.txt", "file_name": "6.txt", "file_type": "text/plain", "file_size": 2787, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a1fe2b5-6629-4406-9765-6684f7264e66", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\6.txt", "file_name": "6.txt", "file_type": "text/plain", "file_size": 2787, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "81e7005401ed86f67c0f1c7565e5155f80a4ad3b425ab361da15512dcf2ccf9a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_RangeBook`**\n=====================================================\n\n### 1. Overview\nThe `sp_RangeBook` SQL procedure is designed to generate ranges of hourly rates for spaces in the `space` table and then calculate the total number of bookings, rental amount, and system fee for each defined range.\n\n### 2. Input\nThe procedure takes three input parameters:\n\n* `lowLimit`: The lower limit of the hourly rate range (FLOAT)\n* `highLimit`: The upper limit of the hourly rate range (FLOAT)\n* `steps`: The increment value for the hourly rate range (INT)\n\n### 3. Output\nThe procedure returns a result set with the following columns:\n\n* `Ranges of Hourly Rate`: The defined range of hourly rates (NVARCHAR(200))\n* `Total Number of Bookings`: The total number of bookings for each defined range (INT)\n* `Rental Amount`: The total rental amount for each defined range (FLOAT)\n* `System Fee`: The total system fee for each defined range (FLOAT)\n\n### 4. Tables\nThe procedure uses the following tables:\n\n* `space`: The table containing information about spaces, including their hourly rates.\n* `booking`: The table containing information about bookings, including their status, space ID, and rental amount.\n\n### 5. Logic\nThe procedure follows these steps:\n\n1. Creates a temporary table `spacetem` to store the hourly rates from the `space` table.\n2. Inserts the hourly rates from the `space` table into the temporary table `spacetem`.\n3. Uses a WHILE loop to iterate over the hourly rate range, updating the `definedRange` column in the temporary table `spacetem` for each range.\n4. Joins the `booking` table with the temporary table `spacetem` on the space ID and filters the bookings by status (`completed` or `booked`).\n5. Groups the joined result set by the defined range and calculates the total number of bookings, rental amount, and system fee for each range.\n6. Drops the temporary table `spacetem` and the result set is returned.\n\n### 6. Operations\nThe procedure performs the following operations:\n\n* Read: `SELECT` statements to retrieve data from the `space` and `booking` tables.\n* Write: `INSERT` statement to insert data into the temporary table `spacetem`.\n* Update: `UPDATE` statement to update the `definedRange` column in the temporary table `spacetem`.\n* Delete: `DROP` statement to drop the temporary table `spacetem` and the result set.\n\n### 7. Use Case\nThe `sp_RangeBook` procedure can be used in the following scenarios:\n\n* To generate ranges of hourly rates for spaces and calculate the total number of bookings, rental amount, and system fee for each range.\n* To analyze the booking patterns and revenue for spaces with different hourly rates.\n* To identify the most profitable ranges of hourly rates and optimize pricing strategies accordingly.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2787, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3b2912cd-089f-411e-b84b-d0c8be79ddbb": {"__data__": {"id_": "3b2912cd-089f-411e-b84b-d0c8be79ddbb", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\7.txt", "file_name": "7.txt", "file_type": "text/plain", "file_size": 3027, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0df5633-52a2-45a4-978d-8417f9fdca26", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\7.txt", "file_name": "7.txt", "file_type": "text/plain", "file_size": 3027, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "fc11343a024fc3c94a7130a285e78ba9c243083129b4b620f75f1f737f795a58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_SpaceRecommend`**\n=====================================================\n\n### 1. Overview\nThe `sp_SpaceRecommend` SQL procedure is designed to recommend available spaces to a user based on their preferred price range, location, and availability. It takes into account the user's booking history and space ratings to provide a list of recommended spaces.\n\n### 2. Input\nThe procedure takes the following input parameters:\n\n* `uid`: The ID of the user (INT)\n* `location`: The location where the user is searching for spaces (VARCHAR(100))\n* `startTime`: The start time of the search period (TIMESTAMP)\n* `endTime`: The end time of the search period (TIMESTAMP)\n* `priceVariation`: The variation in price from the user's preferred range (FLOAT)\n\n### 3. Output\nThe procedure returns a list of recommended spaces, including:\n\n* `Space Name`: The name of the space (VARCHAR)\n* `hourlyRate`: The hourly rate of the space (FLOAT)\n* `halfdayRate`: The half-day rate of the space (FLOAT)\n* `fulldayRate`: The full-day rate of the space (FLOAT)\n* `rating`: The rating of the space (FLOAT)\n\n### 4. Tables\nThe procedure uses the following tables:\n\n* `user`: The user table, which contains information about the user's preferred price range.\n* `space`: The space table, which contains information about available spaces.\n* `booking`: The booking table, which contains information about bookings made by the user.\n\n### 5. Logic\nThe procedure follows these steps:\n\n1. Retrieve the user's preferred price range from the `user` table.\n2. Calculate the upper and lower limits of the price range based on the user's preferred range and the `priceVariation` input parameter.\n3. Retrieve available spaces that match the user's location and price range.\n4. Filter out spaces that are fully booked during the search period.\n5. Join the available spaces with the user's booking history to determine the number of bookings for each space.\n6. Order the recommended spaces based on the number of bookings and space ratings.\n7. Return the top 10 recommended spaces.\n\n### 6. Operations\nThe procedure performs the following operations:\n\n* Read: Retrieves data from the `user`, `space`, and `booking` tables.\n* Write: None\n* Update: None\n* Delete: None\n\n### 7. Use Case\nThe `sp_SpaceRecommend` procedure can be used in the following scenarios:\n\n* A user searches for available spaces in a specific location and price range.\n* The procedure returns a list of recommended spaces based on the user's booking history and space ratings.\n* The user can select a recommended space to book, and the procedure can be used to update the booking information.\n\n**Example Use Case:**\n```sql\nCALL sp_SpaceRecommend(1, 'Downtown', '2025-02-12 10:00:00', '2025-02-12 13:00:00', 10);\n```\nThis call recommends available spaces in the \"Downtown\" location with a price range variation of 10% from the user's preferred range. The procedure returns a list of recommended spaces, including their hourly rates, half-day rates, full-day rates, and ratings.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3027, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3fd01c27-539a-4213-ae55-1cae12566f52": {"__data__": {"id_": "3fd01c27-539a-4213-ae55-1cae12566f52", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\8.txt", "file_name": "8.txt", "file_type": "text/plain", "file_size": 2512, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72e4f38d-dc31-45ac-9e2e-fbf5ca97b5f7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\8.txt", "file_name": "8.txt", "file_type": "text/plain", "file_size": 2512, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "841f4d24311f5c4c433269cb4b023242505f205ab8fc12b8b436f53ab197c378", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "**SQL Procedure Analysis: `sp_UserRegistration`**\n=====================================================\n\n### 1. Overview\nThe `sp_UserRegistration` SQL procedure is designed to register a new user in the `user` table. It takes in various user details such as name, email, phone number, address, preferred range, customer status, owner status, rating, creation date, and update date.\n\n### 2. Input\nThe procedure takes in the following input parameters:\n\n| Parameter Name | Data Type | Description |\n| --- | --- | --- |\n| `name` | `VARCHAR(255)` | User's name |\n| `email` | `VARCHAR(255)` | User's email address |\n| `phone` | `VARCHAR(15)` | User's phone number |\n| `address` | `VARCHAR(500)` | User's address |\n| `preferedRange` | `FLOAT` | User's preferred range |\n| `isCustomer` | `BOOLEAN` | User's customer status |\n| `isOwner` | `BOOLEAN` | User's owner status |\n| `rating` | `FLOAT` | User's rating |\n| `createdAt` | `TIMESTAMP` | Timestamp when the user was created |\n| `updatedAt` | `TIMESTAMP` | Timestamp when the user was last updated |\n\n### 3. Output\nThe procedure does not return any output values. It simply inserts a new user record into the `user` table.\n\n### 4. Tables\nThe procedure uses the following table:\n\n| Table Name | Description |\n| --- | --- |\n| `user` | Table to store user information |\n\n### 5. Logic\nThe procedure inserts a new user record into the `user` table using the provided input parameters. The logic is straightforward, with each input parameter being used to populate the corresponding column in the `user` table.\n\n### 6. Operations\nThe procedure performs the following operations:\n\n* `INSERT`: Inserts a new user record into the `user` table.\n\n### 7. Use Case\nThe `sp_UserRegistration` procedure can be used in the following scenarios:\n\n* When a new user signs up for an application or website, this procedure can be called to create a new user record in the database.\n* When a user's information needs to be updated, this procedure can be modified to update the existing user record instead of inserting a new one.\n\n**Example Use Case:**\n```sql\nCALL sp_UserRegistration('Marc K','marck@gmail.com','+6611188889','ait',1000,TRUE,FALSE,NULL,now(),NULL);\n```\nThis would create a new user record in the `user` table with the provided details.\n\n**Note:** The procedure does not handle any potential errors that may occur during the insertion process. In a real-world scenario, you would want to add error handling to ensure that the procedure behaves correctly in case of errors.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2512, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b708c3f9-cebf-4b0e-925d-1479156bd705": {"__data__": {"id_": "b708c3f9-cebf-4b0e-925d-1479156bd705", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_BookSpace.txt", "file_name": "sp_BookSpace.txt", "file_type": "text/plain", "file_size": 1207, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df639b0c-6314-432b-a12a-f12399dc5202", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_BookSpace.txt", "file_name": "sp_BookSpace.txt", "file_type": "text/plain", "file_size": 1207, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "47177dbd7ee114503317bc28b2172be71a99452916e3e17ab4481058fa7b64bd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_BookSpace`;\n\nDELIMITER // \n\n/*\nCALL sp_BookSpace(1,1,'2025-03-14 11:00:00','2025-03-14 15:00:00',now(),'test');\n*/\n\nCREATE PROCEDURE `sp_BookSpace` (\n\tIN cid \t\t\tINT,\n    IN sid \t\t\tINT,\n    IN startTime \tTIMESTAMP,\n    IN endTime \t\tTIMESTAMP,\n    IN bookingDate  TIMESTAMP,\n    IN remark TEXT\n    )\nBEGIN\n\tDECLARE duration TIME;\n    DECLARE price FLOAT;\n    DECLARE fee FLOAT;\n    DECLARE sts ENUM('available', 'booked', 'cancelled');\n    \n    SET duration = TIMESTAMPDIFF(HOUR,startTime, endTime);\n    IF duration < 12 THEN\n\t\tSET price = (SELECT s.hourlyRate * duration FROM space s WHERE s.id = sid );\n\tELSEIF  duration < 24 THEN\n\t\tSET price = (SELECT s.hourlyRate * (duration-12) + s.halfdayRate  \n\t\t\t\t\t\tFROM space s WHERE s.id = sid );\n\tELSE\n\t\tSET price = (SELECT s.fulldatRate * duration FROM space s WHERE s.id = sid );\n\tEND IF;\n    SET sts = 'booked';\n    \n    INSERT INTO \n\t\tbooking(cid, sid, bookingDate, totalDuration, \n        startTime, endTime, spacePrice, \n        status, remark, createdAt, updatedAt\n\t\t)\n\tVALUES(\n\t\tcid, sid, bookingDate, duration,\n        startTime, endTime, price, \n        sts, remark, now(), now()\n        );\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1205, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17a3a7df-0590-4ac0-851a-499f82078fe4": {"__data__": {"id_": "17a3a7df-0590-4ac0-851a-499f82078fe4", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_MonthlyRevenue.txt", "file_name": "sp_MonthlyRevenue.txt", "file_type": "text/plain", "file_size": 745, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8bcfed0c-7999-4db3-8fbd-1ffd24c48dce", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_MonthlyRevenue.txt", "file_name": "sp_MonthlyRevenue.txt", "file_type": "text/plain", "file_size": 745, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "67b65231013d05d141545e59ca4cb806daa2f9061b8e1dc5de2d801bf6828460", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_MonthlyRevenue`;\n\nDELIMITER // \n\n/*\nCALL sp_MonthlyRevenue('2025-01-01','2025-12-31');\n*/\n\nCREATE PROCEDURE `sp_MonthlyRevenue` (\n\tIN FromDate \tDATETIME,\n    IN ToDate \t\tDATETIME\n    )\nBEGIN\n\t-- SELECT FromDate,ToDate;\n\tSELECT \n\t\tt.Month,\n\t\tt.Year,\n        sum(t.spacePrice) AS 'Space Price',\n        sum(t.sysFee) AS 'Platform Fee',\n        sum(t.total) AS 'Total'\n\tFROM\n\t\t(SELECT \n\t\t\tMONTHNAME(b.endTime) AS 'Month',\n\t\t\tYEAR(b.endTime) 'Year',\n\t\t\tb.spacePrice,\n\t\t\tb.sysFee,\n\t\t\tb.total\n\t\t\tFROM booking b\n\t\t\tINNER JOIN rent r\n\t\t\t\tON r.bid =  b.id\n\t\t\tWHERE \n\t\t\t\tb.endTime BETWEEN FromDate AND ToDate\n\t\t\t\tAND b.status = 'completed'\n\t\t\tORDER BY b.endTime) t\n\t\tGROUP BY t.Month,t.Year;\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 743, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "30f4cf98-6429-4a5b-9c45-20e660377943": {"__data__": {"id_": "30f4cf98-6429-4a5b-9c45-20e660377943", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_MostSpender.txt", "file_name": "sp_MostSpender.txt", "file_type": "text/plain", "file_size": 1044, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1aecb44f-a1e8-4162-b4db-a5a6f07c05e9", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_MostSpender.txt", "file_name": "sp_MostSpender.txt", "file_type": "text/plain", "file_size": 1044, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "55416bbcd7498692cb937a126e770991f685fb60f943e517e31099c2432bff96", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_MostSpender`;\n\nDELIMITER // \n\n/*\nCALL sp_MostSpender('2025-01-01','2025-12-31',5);\n*/\n\nCREATE PROCEDURE `sp_MostSpender` (\n\tIN FromDate \tDATETIME,\n    IN ToDate \t\tDATETIME,\n    IN NumUsers\t\tINT\n    )\nBEGIN\n\t-- SELECT FromDate,ToDate;\n\tSELECT \n\t\tt.name AS 'User Name', \n\t\tCASE \n\t\t\tWHEN TIMESTAMPDIFF(DAY,t.createdAt, now()) = 0 THEN 1\n\t\t\tELSE TIMESTAMPDIFF(DAY,t.createdAt, now()) END \n\t\tAS 'Days On Platform',\n\t\tt.totalAmount AS 'Total Spent Amount', \n\t\tt. totalAmount / (CASE \n\t\t\t\t\t\t\tWHEN TIMESTAMPDIFF(DAY,t.createdAt, now()) = 0 THEN 1\n\t\t\t\t\t\t\tELSE TIMESTAMPDIFF(DAY,t.createdAt, now()) END) \n\t\tAS 'Average Spent Amont Per Day'\n\tFROM\n\t\t(SELECT \n\t\t\tu.name,\n\t\t\tu.createdAt,\n\t\t\tsum(p.paid) AS 'totalAmount'\n\t\tFROM payment p\n\t\tINNER JOIN booking b\n\t\t\tON b.id = p.bid\n\t\tINNER JOIN user u\n\t\t\tON u.id =  b.cid\n\t\tWHERE \n\t\t\tp.createdAt BETWEEN FromDate AND ToDate\n\t\t\tAND p.status = 'completed'\n\t\tGROUP BY u.name,u.createdAt) t\n        ORDER BY t.totalAmount DESC\n        LIMIT NumUsers;\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1041, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "21725773-5825-4f02-882a-f3dd0ac2335f": {"__data__": {"id_": "21725773-5825-4f02-882a-f3dd0ac2335f", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_PayCharge.txt", "file_name": "sp_PayCharge.txt", "file_type": "text/plain", "file_size": 914, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dfa9168f-b92d-4d4b-8a52-f1d1c1dd2a61", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_PayCharge.txt", "file_name": "sp_PayCharge.txt", "file_type": "text/plain", "file_size": 914, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "eeefa732de87723d4f5e7216ed50a26af80e0837da9d44455a0700207695024a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_PayCharge`;\n\nDELIMITER // \n\n/*\nCALL sp_PayCharge(1,1,50,'txt0001','test');\n*/\n\nCREATE PROCEDURE `sp_PayCharge` (\n\tIN rid \t\t\tINT,\n    IN bid \t\t\tINT,\n    IN paid \t\tFLOAT,\n    IN transcId \tVARCHAR(200),\n    IN bank \t\tVARCHAR(200)\n    )\nBEGIN\n\tDECLARE unpaid FLOAT;\n    DECLARE amountToPay FLOAT;\n    DECLARE sts ENUM('pending', 'completed', 'refunded', 'cancelled');\n    \n    SET amountToPay = (SELECT b.total FROM booking b WHERE b.id = bid AND b.status <> 'cancelled') - \n\t\t\t\t\t\t(SELECT SUM(p.paid) FROM payment p WHERE p.bid = bid AND p.status = 'completed');\n    SET unpaid = amountToPay - paid;\n    SET sts = 'completed';\n    \n    INSERT INTO \n\t\tpayment(rid, bid, amountToPay, paid, unpaid,\n        transacId, bank, status, createdAt, updatedAt\n\t\t)\n\tVALUES(\n\t\trid, bid, amountToPay, paid, unpaid,\n        transacId, bank, sts, now(), now()\n        );\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 913, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31fc4c62-15c9-4568-b8b3-ec794c2ffa20": {"__data__": {"id_": "31fc4c62-15c9-4568-b8b3-ec794c2ffa20", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_PopularDay.txt", "file_name": "sp_PopularDay.txt", "file_type": "text/plain", "file_size": 771, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8010df7a-68b8-4199-ad04-c24767c7bb37", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_PopularDay.txt", "file_name": "sp_PopularDay.txt", "file_type": "text/plain", "file_size": 771, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "07e89e8a687d4951f1be33b7070f935d0e11c534526a67a7ca65869880873242", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_PopularDay`;\n\nDELIMITER // \n\n/*\nCALL sp_PopularDay('2025-01-01','2025-12-31');\n*/\n\nCREATE PROCEDURE `sp_PopularDay` (\n\tIN FromDate \tDATETIME,\n    IN ToDate \t\tDATETIME\n    )\nBEGIN\n\t-- SELECT FromDate,ToDate;\n\tSELECT \n\t\tt.Day,\n        count(t.id) AS 'Total Bookings',\n        sum(t.spacePrice) AS 'Space Price',\n        sum(t.sysFee) AS 'Platform Fee'\n\tFROM\n\t\t(SELECT \n\t\t\tdayname(b.endTime) AS 'Day',\n            b.id,\n\t\t\tb.spacePrice,\n\t\t\tb.sysFee\n\t\t\tFROM booking b\n\t\t\tINNER JOIN rent r\n\t\t\t\tON r.bid =  b.id\n\t\t\tWHERE \n\t\t\t\tb.endTime BETWEEN FromDate AND ToDate\n\t\t\t\tAND b.status in ('completed','booked')\n\t\t\t) t\n\t\tGROUP BY t.Day\n        ORDER BY  count(t.id) DESC;\nEND//\nDELIMITER ;\n\nCALL sp_PopularDay('2025-01-01','2025-12-31');", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 770, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7126e381-3df7-48cd-947e-f1af23786aff": {"__data__": {"id_": "7126e381-3df7-48cd-947e-f1af23786aff", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_RangeBook.txt", "file_name": "sp_RangeBook.txt", "file_type": "text/plain", "file_size": 1358, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "915569a2-cf82-44ec-961a-36ccac3a8f26", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_RangeBook.txt", "file_name": "sp_RangeBook.txt", "file_type": "text/plain", "file_size": 1358, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "6fab783d3b47bcb98c1ebd10a714ea7d55336bb5d6c9a79724b51d068c17d487", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_RangeBook`;\n\nDELIMITER // \n\n/*\nCALL sp_RangeBook(0,100,10);\n*/\n\nCREATE PROCEDURE `sp_RangeBook` (\n    IN lowLimit \tFLOAT,\n    IN highLimit \tFLOAT,\n    IN steps\t\tINT\n    )\nBEGIN\n\tDECLARE prePrice FLOAT;\n    DECLARE cur_number FLOAT;\n    \n\tDROP TEMPORARY TABLE IF EXISTS spacetem;\n\tCREATE TEMPORARY TABLE\n\t\t\tspacetem(\n\t\t\t\t\tid INT AUTO_INCREMENT PRIMARY KEY, \n\t\t\t\t\tsid INT, \n                    hourlyRate FLOAT, \n                    definedRange NVARCHAR(200));\n                    \n                    \n\tINSERT INTO \n\t\tspacetem(sid, hourlyRate)\n\t\t\tSELECT id, hourlyRate FROM space;\n            \n    \n    WHILE lowLimit < highLimit   DO\n\t\tUPDATE spacetem st\n\t\t\tSET definedRange = CAST(lowLimit AS CHAR) || ' - ' || CAST(lowLimit + steps AS CHAR)\n\t\t\t\tWHERE st.hourlyRate BETWEEN lowLimit AND lowLimit + steps;\n\t\tSET lowLimit = lowLimit + steps;\n\t\n    END WHILE;\n    \n    SELECT st.definedRange AS 'Ranges of Hourly Rate',\n    COUNT(b.id) AS 'Total Number of Bookings',\n    SUM(b.spacePrice) AS 'Rental Amount',\n    SUM(b.sysFee) As 'System Fee'\n    -- COUNT(DISTINCT b.sid) AS 'Number of Spaces'\n    FROM booking b\n\tINNER JOIN spacetem st\n    ON b.sid = st.sid\n    WHERE b.status IN ('completed','booked')\n    GROUP BY st.definedRange\n    ;\n    \n    \n    DROP TEMPORARY TABLE IF EXISTS temp;\n\t\n    \nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1357, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "15549607-dda2-47dc-8508-16cdf4e61c68": {"__data__": {"id_": "15549607-dda2-47dc-8508-16cdf4e61c68", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_SpaceRecommend.txt", "file_name": "sp_SpaceRecommend.txt", "file_type": "text/plain", "file_size": 1718, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06a0734e-33fd-40b5-9a43-4a045b05e80c", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_SpaceRecommend.txt", "file_name": "sp_SpaceRecommend.txt", "file_type": "text/plain", "file_size": 1718, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "58199cfacdaf74bffac700171b1e718c999cd9f5fabccb327190b4d47ae60168", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_SpaceRecommend`;\n\nDELIMITER // \n\n/*\nCALL sp_SpaceRecommend(1,'Downtown','2025-02-12 10:00:00','2025-02-12 13:00:00',10);\n*/\n\nCREATE PROCEDURE `sp_SpaceRecommend` (\n\tIN uid \t\t\t\tINT,\n    IN location \t\tVARCHAR(100),\n    IN startTime \t\tTIMESTAMP,\n    IN endTime \t\t\tTIMESTAMP,\n    IN priceVariation \tFLOAT\n    )\nBEGIN\n\tDECLARE prePrice FLOAT;\n    DECLARE upLimit FLOAT;\n    DECLARE loLimit FLOAT;\n    SET prePrice = (SELECT u.preferedRange FROM user u WHERE u.id = uid);\n    SET upLimit = prePrice + priceVariation, loLimit = prePrice - priceVariation;\n    \n\tSELECT av.name AS 'Space Name',av.hourlyRate, av.halfdayRate, av.fulldayRate, av.rating\n\tFROM \n    -- This suquery av is for availabe spaces\n\t\t(SELECT *\n\t\tFROM space s \n\t\tWHERE s.id NOT IN\n        -- This suquery is to find fully booked spaces within searching timeslots\n\t\t\t(SELECT bt.sid \n\t\t\t\tFROM (\n\t\t\t\t\tSELECT b.sid,SUM(CAST(TIMESTAMPDIFF(HOUR,b.startTime, b.endTime) AS DECIMAL)) AS 'bookedHours' \n\t\t\t\t\tFROM booking b\n\t\t\t\t\tWHERE DATE(b.startTime) = DATE(startTime)\n\t\t\t\t\tAND b.startTime >= startTime  AND b.endTime <= endTime\n\t\t\t\t\tGROUP BY b.sid\n\t\t\t\t\t) bt\n\t\t\t\tWHERE bt.bookedHours >= CAST(TIMESTAMPDIFF(HOUR,startTime, endTime) AS DECIMAL)\n                AND s.status = 'open'\n\t\t\t)\n\t\t) av\n\tLEFT JOIN \n    -- This subquery is to see the number of bookings for each spaces by the user\n\t\t(SELECT b.sid,count(b.cid) AS 'num_bookings' \n\t\tFROM booking b\n\t\t\tWHERE b.cid = uid\n\t\t\tGROUP BY b.sid) bf\n\tON av.id = bf.sid\n    -- filtering and ordering to recommend\n\tWHERE av.location = location\n\tAND av.hourlyRate BETWEEN loLimit AND upLimit\n\tORDER BY IFNULL(bf.num_bookings,0) DESC, av.rating DESC\n\tLIMIT 10;\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1717, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e0c817a-d462-4c11-ba20-2d19937ab6d9": {"__data__": {"id_": "0e0c817a-d462-4c11-ba20-2d19937ab6d9", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_UserRegistration.txt", "file_name": "sp_UserRegistration.txt", "file_type": "text/plain", "file_size": 837, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9eda0a4e-bedf-4f6b-a9a0-b29d50e7f020", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_UserRegistration.txt", "file_name": "sp_UserRegistration.txt", "file_type": "text/plain", "file_size": 837, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "41c734bb7ac3925327952b46baaaada8d67fb40c50ec438f984d1e39ae9896f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "USE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_UserRegistration`;\n\nDELIMITER // \n/*\nCALL sp_UserRegistration('Marc K','marck@gmail.com','+6611188889','ait',1000,TRUE,FALSE,NULL,now(),NULL);\n*/\n\nCREATE PROCEDURE `sp_UserRegistration` (\n\tIN name \t\t\tVARCHAR(255),\n    IN email \t\t\tVARCHAR(255),\n    IN phone \t\t\tVARCHAR(15),\n    IN address \t\t\tVARCHAR(500),\n    IN preferedRange \tFLOAT,\n    IN isCustomer \t\tBOOLEAN,\n    IN isOwner \t\t\tBOOLEAN,\n    IN rating \t\t\tFLOAT,\n    IN createdAt \t\tTIMESTAMP,\n    IN updatedAt \t\tTIMESTAMP \n    )\nBEGIN\n\tINSERT INTO \n\t\tuser(\n\t\t\tname,\n\t\t\temail,\n\t\t\tphone,\n\t\t\taddress,\n\t\t\tpreferedRange,\n\t\t\tisCustomer,\n\t\t\tisOwner,\n\t\t\trating,\n\t\t\tcreatedAt,\n\t\t\tupdatedAt\n\t\t)\n\t\tVALUES(\n\t\t\tname,\n\t\t\temail,\n\t\t\tphone,\n\t\t\taddress,\n\t\t\tpreferedRange,\n\t\t\tisCustomer,\n\t\t\tisOwner,\n\t\t\trating,\n\t\t\tcreatedAt,\n\t\t\tupdatedAt\n\t\t);\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 836, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c039a98c-344f-4be4-a3b0-24b695725a9c": {"__data__": {"id_": "c039a98c-344f-4be4-a3b0-24b695725a9c", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6157ca8-3943-4a02-9737-f59d907e8197", "node_type": "1", "metadata": {}, "hash": "615fc754856aebd434f45832b9bedd2f1008036945044cb4d63e4da00273401b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "-- 1. Kaung Nyo Lwin\nUSE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_UserRegistration`;\n\nDELIMITER // \n/*\nCALL sp_UserRegistration('Marc K','marck@gmail.com','+6611188889','ait',1000,TRUE,FALSE,NULL,now(),NULL);\n*/\n\nCREATE PROCEDURE `sp_UserRegistration` (\n\tIN name \t\t\tVARCHAR(255),\n    IN email \t\t\tVARCHAR(255),\n    IN phone \t\t\tVARCHAR(15),\n    IN address \t\t\tVARCHAR(500),\n    IN preferedRange \tFLOAT,\n    IN isCustomer \t\tBOOLEAN,\n    IN isOwner \t\t\tBOOLEAN,\n    IN rating \t\t\tFLOAT,\n    IN createdAt \t\tTIMESTAMP,\n    IN updatedAt \t\tTIMESTAMP \n    )\nBEGIN\n\tINSERT INTO \n\t\tuser(\n\t\t\tname,\n\t\t\temail,\n\t\t\tphone,\n\t\t\taddress,\n\t\t\tpreferedRange,\n\t\t\tisCustomer,\n\t\t\tisOwner,\n\t\t\trating,\n\t\t\tcreatedAt,\n\t\t\tupdatedAt\n\t\t)\n\t\tVALUES(\n\t\t\tname,\n\t\t\temail,\n\t\t\tphone,\n\t\t\taddress,\n\t\t\tpreferedRange,\n\t\t\tisCustomer,\n\t\t\tisOwner,\n\t\t\trating,\n\t\t\tcreatedAt,\n\t\t\tupdatedAt\n\t\t);\nEND//\nDELIMITER ;\n\nDROP PROCEDURE IF EXISTS `sp_BookSpace`;\n\nDELIMITER // \n\n/*\nCALL sp_BookSpace(1,1,'2025-03-14 11:00:00','2025-03-14 15:00:00',now(),'test');\n*/\n\nCREATE PROCEDURE `sp_BookSpace` (\n\tIN cid \t\t\tINT,\n    IN sid \t\t\tINT,\n    IN startTime \tTIMESTAMP,\n    IN endTime \t\tTIMESTAMP,\n    IN bookingDate  TIMESTAMP,\n    IN remark TEXT\n    )\nBEGIN\n\tDECLARE duration TIME;\n    DECLARE price FLOAT;\n    DECLARE fee FLOAT;\n    DECLARE sts ENUM('available', 'booked', 'cancelled');\n    \n    SET duration = TIMESTAMPDIFF(HOUR,startTime, endTime);\n    IF duration < 12 THEN\n\t\tSET price = (SELECT s.hourlyRate * duration FROM space s WHERE s.id = sid );\n\tELSEIF  duration < 24 THEN\n\t\tSET price = (SELECT s.hourlyRate * (duration-12) + s.halfdayRate  \n\t\t\t\t\t\tFROM space s WHERE s.id = sid );\n\tELSE\n\t\tSET price = (SELECT s.fulldatRate * duration FROM space s WHERE s.id = sid );\n\tEND IF;\n    SET sts = 'booked';\n    \n    INSERT INTO \n\t\tbooking(cid, sid, bookingDate, totalDuration, \n        startTime, endTime, spacePrice, \n        status, remark, createdAt, updatedAt\n\t\t)\n\tVALUES(\n\t\tcid, sid, bookingDate, duration,\n        startTime, endTime, price, \n        sts, remark, now(), now()\n        );\nEND//\nDELIMITER ;\n\nUSE OurSpace;\n\nDROP PROCEDURE IF EXISTS `sp_PayCharge`;\n\nDELIMITER // \n\n/*\nCALL sp_PayCharge(1,1,50,'txt0001','test');\n*/\n\nCREATE PROCEDURE `sp_PayCharge` (\n\tIN rid \t\t\tINT,\n    IN bid \t\t\tINT,\n    IN paid \t\tFLOAT,\n    IN transcId \tVARCHAR(200),\n    IN bank \t\tVARCHAR(200)\n    )\nBEGIN\n\tDECLARE unpaid FLOAT;\n    DECLARE amountToPay FLOAT;\n    DECLARE sts ENUM('pending', 'completed', 'refunded', 'cancelled');\n    \n    SET amountToPay = (SELECT b.total FROM booking b WHERE b.id = bid AND b.status <> 'cancelled') - \n\t\t\t\t\t\t(SELECT SUM(p.paid) FROM payment p WHERE p.bid = bid AND p.status = 'completed');\n    SET unpaid = amountToPay - paid;\n    SET sts = 'completed';\n    \n    INSERT INTO \n\t\tpayment(rid, bid, amountToPay, paid, unpaid,\n        transacId, bank, status, createdAt, updatedAt\n\t\t)\n\tVALUES(\n\t\trid, bid, amountToPay, paid, unpaid,\n        transacId, bank, sts, now(), now()\n        );\nEND//\nDELIMITER ;\n\nDROP PROCEDURE IF EXISTS `sp_MostSpender`;\n\nDELIMITER // \n\n/*\nCALL sp_MostSpender('2025-01-01','2025-12-31',5);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3077, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e6157ca8-3943-4a02-9737-f59d907e8197": {"__data__": {"id_": "e6157ca8-3943-4a02-9737-f59d907e8197", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c039a98c-344f-4be4-a3b0-24b695725a9c", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "97958216f5c6c1a9b30c644039e3b25402ff2ae43402d97fd16944d491c4a3bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e1ff4d1-4d43-442d-a25e-6f1243a6712f", "node_type": "1", "metadata": {}, "hash": "0c3df8eaecb8f6eeb0e3f98b437dc87c9f355938bc5106f6a86cbae37fedf5ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "'cancelled');\n    \n    SET amountToPay = (SELECT b.total FROM booking b WHERE b.id = bid AND b.status <> 'cancelled') - \n\t\t\t\t\t\t(SELECT SUM(p.paid) FROM payment p WHERE p.bid = bid AND p.status = 'completed');\n    SET unpaid = amountToPay - paid;\n    SET sts = 'completed';\n    \n    INSERT INTO \n\t\tpayment(rid, bid, amountToPay, paid, unpaid,\n        transacId, bank, status, createdAt, updatedAt\n\t\t)\n\tVALUES(\n\t\trid, bid, amountToPay, paid, unpaid,\n        transacId, bank, sts, now(), now()\n        );\nEND//\nDELIMITER ;\n\nDROP PROCEDURE IF EXISTS `sp_MostSpender`;\n\nDELIMITER // \n\n/*\nCALL sp_MostSpender('2025-01-01','2025-12-31',5);\n*/\n\nCREATE PROCEDURE `sp_MostSpender` (\n\tIN FromDate \tDATETIME,\n    IN ToDate \t\tDATETIME,\n    IN NumUsers\t\tINT\n    )\nBEGIN\n\t-- SELECT FromDate,ToDate;\n\tSELECT \n\t\tt.name AS 'User Name', \n\t\tCASE \n\t\t\tWHEN TIMESTAMPDIFF(DAY,t.createdAt, now()) = 0 THEN 1\n\t\t\tELSE TIMESTAMPDIFF(DAY,t.createdAt, now()) END \n\t\tAS 'Days On Platform',\n\t\tt.totalAmount AS 'Total Spent Amount', \n\t\tt. totalAmount / (CASE \n\t\t\t\t\t\t\tWHEN TIMESTAMPDIFF(DAY,t.createdAt, now()) = 0 THEN 1\n\t\t\t\t\t\t\tELSE TIMESTAMPDIFF(DAY,t.createdAt, now()) END) \n\t\tAS 'Average Spent Amont Per Day'\n\tFROM\n\t\t(SELECT \n\t\t\tu.name,\n\t\t\tu.createdAt,\n\t\t\tsum(p.paid) AS 'totalAmount'\n\t\tFROM payment p\n\t\tINNER JOIN booking b\n\t\t\tON b.id = p.bid\n\t\tINNER JOIN user u\n\t\t\tON u.id =  b.cid\n\t\tWHERE \n\t\t\tp.createdAt BETWEEN FromDate AND ToDate\n\t\t\tAND p.status = 'completed'\n\t\tGROUP BY u.name,u.createdAt) t\n        ORDER BY t.totalAmount DESC\n        LIMIT NumUsers;\nEND//\nDELIMITER ;\n\nDROP PROCEDURE IF EXISTS `sp_MonthlyRevenue`;\n\nDELIMITER // \n\n/*\nCALL sp_MonthlyRevenue('2025-01-01','2025-12-31');\n*/\n\nCREATE PROCEDURE `sp_MonthlyRevenue` (\n\tIN FromDate \tDATETIME,\n    IN ToDate \t\tDATETIME\n    )\nBEGIN\n\t-- SELECT FromDate,ToDate;\n\tSELECT \n\t\tt.Month,\n\t\tt.Year,\n        sum(t.spacePrice) AS 'Space Price',\n        sum(t.sysFee) AS 'Platform Fee',\n        sum(t.total) AS 'Total'\n\tFROM\n\t\t(SELECT \n\t\t\tMONTHNAME(b.endTime) AS 'Month',\n\t\t\tYEAR(b.endTime) 'Year',\n\t\t\tb.spacePrice,\n\t\t\tb.sysFee,\n\t\t\tb.total\n\t\t\tFROM booking b\n\t\t\tINNER JOIN rent r\n\t\t\t\tON r.bid =  b.id\n\t\t\tWHERE \n\t\t\t\tb.endTime BETWEEN FromDate AND ToDate\n\t\t\t\tAND b.status = 'completed'\n\t\t\tORDER BY b.endTime) t\n\t\tGROUP BY t.Month,t.Year;\nEND//\nDELIMITER ;\n\n\nDROP PROCEDURE IF EXISTS `sp_PopularDay`;\n\nDELIMITER // \n\n/*\nCALL sp_PopularDay('2025-01-01','2025-12-31');\n*/\n\nCREATE PROCEDURE `sp_PopularDay` (\n\tIN FromDate \tDATETIME,\n    IN ToDate \t\tDATETIME\n    )\nBEGIN\n\t-- SELECT FromDate,ToDate;\n\tSELECT \n\t\tt.Day,\n        count(t.id) AS 'Total Bookings',\n        sum(t.spacePrice) AS 'Space Price',\n        sum(t.sysFee) AS 'Platform Fee'\n\tFROM\n\t\t(SELECT \n\t\t\tdayname(b.endTime) AS 'Day',\n            b.id,\n\t\t\tb.spacePrice,\n\t\t\tb.sysFee\n\t\t\tFROM booking b\n\t\t\tINNER JOIN rent r\n\t\t\t\tON r.bid =  b.id\n\t\t\tWHERE \n\t\t\t\tb.endTime BETWEEN FromDate AND ToDate\n\t\t\t\tAND b.status in ('completed','booked')\n\t\t\t) t\n\t\tGROUP BY t.Day\n        ORDER BY  count(t.id) DESC;\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 2445, "end_char_idx": 5432, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1e1ff4d1-4d43-442d-a25e-6f1243a6712f": {"__data__": {"id_": "1e1ff4d1-4d43-442d-a25e-6f1243a6712f", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6157ca8-3943-4a02-9737-f59d907e8197", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "5f7cc63d17b63ad3f6aec613ca55e26a467e6b6a8311a0207838814eae1ea88f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62c6507d-1a3e-4e88-8c40-d5ec3131116a", "node_type": "1", "metadata": {}, "hash": "91351760af883bf10cf5755e48c8695078c5e0f35e9dcbf2e3049a768aea1ab0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "DROP PROCEDURE IF EXISTS `sp_RangeBook`;\n\nDELIMITER // \n\n/*\nCALL sp_RangeBook(0,100,10);\n*/\n\nCREATE PROCEDURE `sp_RangeBook` (\n    IN lowLimit \tFLOAT,\n    IN highLimit \tFLOAT,\n    IN steps\t\tINT\n    )\nBEGIN\n\tDECLARE prePrice FLOAT;\n    DECLARE cur_number FLOAT;\n    \n\tDROP TEMPORARY TABLE IF EXISTS spacetem;\n\tCREATE TEMPORARY TABLE\n\t\t\tspacetem(\n\t\t\t\t\tid INT AUTO_INCREMENT PRIMARY KEY, \n\t\t\t\t\tsid INT, \n                    hourlyRate FLOAT, \n                    definedRange NVARCHAR(200));\n                    \n                    \n\tINSERT INTO \n\t\tspacetem(sid, hourlyRate)\n\t\t\tSELECT id, hourlyRate FROM space;\n            \n    \n    WHILE lowLimit < highLimit   DO\n\t\tUPDATE spacetem st\n\t\t\tSET definedRange = CAST(lowLimit AS CHAR) || ' - ' || CAST(lowLimit + steps AS CHAR)\n\t\t\t\tWHERE st.hourlyRate BETWEEN lowLimit AND lowLimit + steps;\n\t\tSET lowLimit = lowLimit + steps;\n\t\n    END WHILE;\n    \n    SELECT st.definedRange AS 'Ranges of Hourly Rate',\n    COUNT(b.id) AS 'Total Number of Bookings',\n    SUM(b.sysFee) As 'System Fee'\n    FROM booking b\n\tINNER JOIN spacetem st\n    ON b.sid = st.sid\n    WHERE b.status IN ('completed','booked')\n    GROUP BY st.definedRange\n    ;\n    \n    \n    DROP TEMPORARY TABLE IF EXISTS spacetem;\n\t\n    \nEND//\nDELIMITER ;\n\nDROP PROCEDURE IF EXISTS `sp_SpaceRecommend`;\n\nDELIMITER // \n\n/*\nCALL sp_SpaceRecommend(1,'Downtown','2025-02-12 10:00:00','2025-02-12 13:00:00',10);\n*/\n\nCREATE PROCEDURE `sp_SpaceRecommend` (\n\tIN uid \t\t\t\tINT,\n    IN location \t\tVARCHAR(100),\n    IN startTime \t\tTIMESTAMP,\n    IN endTime \t\t\tTIMESTAMP,\n    IN priceVariation \tFLOAT\n    )\nBEGIN\n\tDECLARE prePrice FLOAT;\n    DECLARE upLimit FLOAT;\n    DECLARE loLimit FLOAT;\n    SET prePrice = (SELECT u.preferedRange FROM user u WHERE u.id = uid);\n    SET upLimit = prePrice + priceVariation, loLimit = prePrice - priceVariation;\n    \n\tSELECT av.name AS 'Space Name',av.hourlyRate, av.halfdayRate, av.fulldayRate, av.rating\n\tFROM \n    -- This suquery av is for availabe spaces\n\t\t(SELECT *\n\t\tFROM space s \n\t\tWHERE s.id NOT IN\n        -- This suquery is to find fully booked spaces within searching timeslots\n\t\t\t(SELECT bt.sid \n\t\t\t\tFROM (\n\t\t\t\t\tSELECT b.sid,SUM(CAST(TIMESTAMPDIFF(HOUR,b.startTime, b.endTime) AS DECIMAL)) AS 'bookedHours' \n\t\t\t\t\tFROM booking b\n\t\t\t\t\tWHERE DATE(b.startTime) = DATE(startTime)\n\t\t\t\t\tAND b.startTime >= startTime  AND b.endTime <= endTime\n\t\t\t\t\tGROUP BY b.sid\n\t\t\t\t\t) bt\n\t\t\t\tWHERE bt.bookedHours >= CAST(TIMESTAMPDIFF(HOUR,startTime, endTime) AS DECIMAL)\n\t\t\t)\n\t\t) av\n\tLEFT JOIN \n    -- This subquery is to see the number of bookings for each spaces by the user\n\t\t(SELECT b.sid,count(b.cid) AS 'num_bookings' \n\t\tFROM booking b\n\t\t\tWHERE b.cid = uid\n\t\t\tGROUP BY b.sid) bf\n\tON av.id = bf.sid\n    -- filtering and ordering to recommend\n\tWHERE av.location = location\n\tAND av.hourlyRate BETWEEN loLimit AND upLimit\n\tORDER BY IFNULL(bf.num_bookings,0) DESC, av.rating DESC\n\tLIMIT 10;\nEND//\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 5435, "end_char_idx": 8354, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "62c6507d-1a3e-4e88-8c40-d5ec3131116a": {"__data__": {"id_": "62c6507d-1a3e-4e88-8c40-d5ec3131116a", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e1ff4d1-4d43-442d-a25e-6f1243a6712f", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "2bf2d730c33af33481355d9f23b5adf40e3cbfac48e2b1df42ee29d7777c4cff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a02fd073-cce9-47df-adb9-1d4e349b0829", "node_type": "1", "metadata": {}, "hash": "54fcd32371e7c7ff64ffb0d98ca6d3810d9ff374ebba769535bd2e1002e127c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "-- 2. Cassandra Chang\n\nSELECT * FROM feedback;\n-- FEEDBACK SUBMISSION\nDELIMITER //\n/*\nCALL SubmitFeedback(10, 4, 'Updated review: Still great, but could improve Wi-Fi.', 4.4);\n*/\nCREATE procedure `SubmitFeedback` (\n\tIN p_cid INT,       \n    IN p_sid INT,       \n    IN p_reviews VARCHAR(255),  \n    IN p_rating FLOAT\n)\nBEGIN \n\tDECLARE feedback_exists INT;\n    -- Start the transaction\n    START TRANSACTION;\n\n    -- Check if feedback already exists \n    -- for the given customer and space\n    SELECT COUNT(*) INTO feedback_exists \n    FROM feedback \n    WHERE cid = p_cid AND sid = p_sid;\n\n    -- If feedback exists, update it\n    IF feedback_exists > 0 THEN\n        UPDATE feedback \n        SET reviews = p_reviews, rating = p_rating, createdAt = NOW()\n        WHERE cid = p_cid AND sid = p_sid;\n    \n    -- If no feedback exists, insert a new record\n    ELSE\n        INSERT INTO feedback (cid, sid, reviews, rating, createdAt)\n        VALUES (p_cid, p_sid, p_reviews, p_rating, NOW());\n    END IF;\n    -- Commit the transaction if successful\n    COMMIT;\nEND//\n\nDELIMITER ;", "mimetype": "text/plain", "start_char_idx": 8357, "end_char_idx": 9432, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a02fd073-cce9-47df-adb9-1d4e349b0829": {"__data__": {"id_": "a02fd073-cce9-47df-adb9-1d4e349b0829", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62c6507d-1a3e-4e88-8c40-d5ec3131116a", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "0ff340358e3549004869aefd0bc2a10e5b4604b8ad0924e2009677f313e62956", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1d61768-560c-4f6f-b709-f0a87ee50586", "node_type": "1", "metadata": {}, "hash": "d9fcf5a3f5a220c3530d9562709bd7b228b79504e4d1f3271aaf09b6f4a079bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "DELIMITER //\n\nCREATE PROCEDURE AdjustRentalRates(\n    IN p_oid INT,         \n    IN p_sid INT,         \n    IN p_hourlyRate FLOAT, \n    IN p_halfdayRate FLOAT, \n    IN p_fulldayRate FLOAT\n)\nBEGIN\n    DECLARE space_exists INT;\n\n    -- Start transaction\n    START TRANSACTION;\n\n    -- Check if the space belongs to the owner\n    SELECT COUNT(*) INTO space_exists \n    FROM space \n    WHERE id = p_sid AND oid = p_oid;\n\n    -- If the space exists under the owner's control, update rental rates\n    IF space_exists > 0 THEN\n        UPDATE space \n        SET hourlyRate = p_hourlyRate, \n            halfdayRate = p_halfdayRate, \n            fulldayRate = p_fulldayRate, \n            updatedAt = NOW()\n        WHERE id = p_sid;\n\n        -- Commit the transaction if successful\n        COMMIT;\n    ELSE\n        -- Rollback if the space does not belong to the owner\n        ROLLBACK;\n        SIGNAL SQLSTATE '45000' \n        SET MESSAGE_TEXT = 'Error: Space does not belong to the specified owner.';\n    END IF;\nEND//\nDELIMITER //\nDELIMITER ;\n\nDELIMITER //\n\nCREATE PROCEDURE UpdateUserProfile(\n    IN p_user_id INT,         \n    IN p_name VARCHAR(255),   \n    IN p_email VARCHAR(255),  \n    IN p_phone VARCHAR(15),   \n    IN p_address VARCHAR(500),\n    IN p_preferedRange FLOAT  \n)\nBEGIN\n    DECLARE user_exists INT;\n    \n    -- Start transaction\n    START TRANSACTION;\n\n    -- Check if user exists\n    SELECT COUNT(*) INTO user_exists FROM user WHERE id = p_user_id;\n\n    -- If user exists, update details\n    IF user_exists > 0 THEN\n        UPDATE user \n        SET \n            name = IFNULL(p_name, name),\n            email = IFNULL(p_email, email),\n            phone = IFNULL(p_phone, phone),\n            address = IFNULL(p_address, address),\n            preferedRange = IFNULL(p_preferedRange, preferedRange),\n            updatedAt = NOW()\n        WHERE id = p_user_id;\n\n        -- Commit transaction\n        COMMIT;\n    ELSE\n        -- Rollback transaction and return error if user does not exist\n        ROLLBACK;\n        SIGNAL SQLSTATE '45000' \n        SET MESSAGE_TEXT = 'Error: User not found.';\n    END IF;\nEND//\n\nDELIMITER ;\n\n/*\nCALL SubmitFeedback(10, 4, 'Updated review: Still great, but could improve Wi-Fi.', 4.4);\n*/\n\n/*CALL UpdateUserProfile(5, 'Mary Higgins', 'mary@example.com', '9876543210', '123 Main St', 20);\n*/\n\n/*\nCALL AdjustRentalRates(6,3,20, 120, 220); */\n\n-- q1.Feedback Report\n\nselect * from feedback;\nselect * from space;\nselect * from facility;\nSELECT \n    s.location,\n    f.id AS facility_id,\n    MAX(s.rating) AS highest_rating,\n    GROUP_CONCAT(s.name ORDER BY s.rating DESC) AS top_rated_spaces\nFROM space s\nJOIN facility f ON s.fid = f.id\nGROUP BY s.location, f.id\nORDER BY highest_rating DESC;\n\n-- q2.Customer Booking Report\nSELECT \n    b.id AS Booking_ID,\n    u.name AS Customer_Name,\n    s.name AS Space_Name,\n    s.location AS Location,\n    b.bookingDate AS Booking_Date,\n    b.total AS Total_Charges\nFROM booking b\nJOIN user u ON b.cid = u.id \nJOIN space s ON b.sid = s.id\nWHERE b.cid = 1\nORDER BY b.bookingDate DESC;\n\n-- q3.Space Owner Earnings Report\n\nselect * from booking;\nSELECT \n\ts.oid AS Space_Owner,\n    s.id AS Space_Id,\n    s.name AS Space_Name,\n    COUNT(b.bookingDate) AS Total_Bookings,\n    ROUND(SUM(b.spacePrice - (b.spacePrice * (b.discount/100) ) - b.sysFee ))AS Owner_Earning\nFROM space s\nJOIN booking b ON s.id=b.sid\nJOIN user u ON s.oid = u.id\nWHERE s.oid=4\nGROUP BY s.id, s.name, s.oid\nORDER BY Owner_Earning DESC;\n\n-- q4.Inactive Spaces Report", "mimetype": "text/plain", "start_char_idx": 9435, "end_char_idx": 12937, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c1d61768-560c-4f6f-b709-f0a87ee50586": {"__data__": {"id_": "c1d61768-560c-4f6f-b709-f0a87ee50586", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a02fd073-cce9-47df-adb9-1d4e349b0829", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "2fc077cf996cbe311ec88484a6b81c34ab22309c3964852b3090c9b887174b09", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7d63f86-7bda-4432-bcd0-9095eff12693", "node_type": "1", "metadata": {}, "hash": "26ea3535dca803c9235e3a794a39b965a36895b6520e10c24a913b3275c81f62", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "SELECT \n\tu.name AS Owner_Name,\n    s.location AS Location,\n    s.address AS Address,\n\ts.oid AS Owner_ID,\n    s.name AS Space_Name,\n    s.status\nFROM\n\tspace s\nJOIN user u ON s.oid=u.id\nWHERE status='closed' and oid=4;\n\n-- q5.Cancelled Bookings Report\n\nINSERT INTO booking (\n     cid, sid, bookingDate, totalDuration, startTime, endTime, \n    spacePrice, status, remark, createdAt, updatedAt\n) VALUES (\n    5, 16, '2025-08-15 14:00:00', '03:00:00', '2025-08-15 14:00:00', '2025-08-15 17:00:00',\n    84, 'cancelled', 'Customer canceled', NOW(), NOW()\n);\n\n\nSELECT \n\tu.name AS Customer_Name,\n    u.phone AS Customer_Number,\n    u.email AS Customer_Email,\n    s.name AS Space_Name,\n    s.location AS Location,\n    s.address AS Address,\n\ts.oid AS Owner_ID,\n    b.status AS Booking_Status\nFROM\n\tbooking b\nJOIN user u ON b.cid=u.id\nJOIN space s ON s.id=b.sid\nWHERE b.status='cancelled';\n\nselect * from booking;\n\n-- 3. Aymen Zubair Qureshi\n\n-- 1. Owner Reviews Feedback Procedure\nDELIMITER //\n\nCREATE PROCEDURE GetOwnerFeedback(IN owner_id INT)\nBEGIN\n    -- Fetch owner feedback details\n    SELECT \n        s.name AS spaceName, \n        u.name AS CustomerName, \n        o.name AS OwnerName, \n        f.rating, \n        f.reviews, \n        f.createdAt\n    FROM feedback f\n    JOIN space s ON f.sid = s.id\n    JOIN user u ON f.cid = u.id  \n    JOIN user o ON s.oid = o.id  \n    WHERE o.id = owner_id  \n    ORDER BY f.createdAt DESC;\nEND //\n\nDELIMITER ;\n\n-- To call the feedbacks of a specific owner based on id:\nCALL GetOwnerFeedback(5);", "mimetype": "text/plain", "start_char_idx": 12940, "end_char_idx": 14465, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f7d63f86-7bda-4432-bcd0-9095eff12693": {"__data__": {"id_": "f7d63f86-7bda-4432-bcd0-9095eff12693", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1d61768-560c-4f6f-b709-f0a87ee50586", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "bc5375c86bb892228154f5710b2f297344d87243ecb83daec258e239cbf0f489", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86459bf3-4778-41a9-a2c1-e49ca44eb249", "node_type": "1", "metadata": {}, "hash": "49b12dded891e5bcee170b2b48505f55bf02ccdefffaef693cc19418161db748", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "-- 2. Editing the Bookings Procedure\nDELIMITER //\n\nCREATE PROCEDURE editBookingCustomer(\n    IN p_booking_id INT,               -- Booking ID to edit\n    IN p_customer_name VARCHAR(255),   -- Customer's name to verify the owner of the booking\n    IN p_new_booking_date DATETIME,    -- New booking date\n    IN p_new_start_time TIMESTAMP,     -- New start time\n    IN p_new_end_time TIMESTAMP,       -- New end time\n    IN p_new_status ENUM('available','booked','cancelled'),  -- New status for the booking\n    IN p_updated_at TIMESTAMP          -- Timestamp for when the booking is updated\n)\nBEGIN\n    DECLARE customer_id INT;\n\n    -- Start the transaction\n    START TRANSACTION;\n\n    -- Get the customer's ID based on the provided name (limiting to one row)\n    SELECT id INTO customer_id \n    FROM user \n    WHERE name = p_customer_name\n    LIMIT 1;  -- Ensures only one row is returned, even if multiple users share the same name\n\n    -- Check if the customer is the one who made the booking\n    IF NOT EXISTS (\n        SELECT 1 FROM booking WHERE id = p_booking_id AND cid = customer_id\n    ) THEN\n        -- Rollback the transaction if the customer is not authorized\n        ROLLBACK;\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Customer is not authorized to edit this booking';\n    ELSE\n        -- Proceed with updating the booking if the customer is authorized\n        UPDATE booking \n        SET bookingDate = p_new_booking_date, \n            startTime = p_new_start_time, \n            endTime = p_new_end_time, \n            status = p_new_status, \n            updatedAt = p_updated_at\n        WHERE id = p_booking_id \n        AND cid = customer_id;  -- Ensuring that only the customer's booking can be modified\n        \n        -- Commit the transaction\n        COMMIT;\n    END IF;\nEND//\n\nDELIMITER ;\n\n-- Call to edit a booking for a customer:\nCALL EditBookingCustomer(\n    22,                                -- Booking ID to edit\n    'Hannah Yellow',                        -- Customer's name to verify the booking\n    '2025-02-15 11:00:00',             -- New booking date\n    '2025-02-15 11:00:00',             -- New start time\n    '2025-02-15 13:00:00',             -- New end time\n    'booked',                           -- New status\n    CURRENT_TIMESTAMP                  -- Timestamp for when the booking is updated\n);\n\n-- SELECT to verify booking after update\nSELECT id, bookingDate, startTime, endTime, status, updatedAt\nFROM booking\nWHERE id = 22;", "mimetype": "text/plain", "start_char_idx": 14468, "end_char_idx": 16943, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "86459bf3-4778-41a9-a2c1-e49ca44eb249": {"__data__": {"id_": "86459bf3-4778-41a9-a2c1-e49ca44eb249", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7d63f86-7bda-4432-bcd0-9095eff12693", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "88f3a1113013e3a60fee3beee881caf4786a06ef7f3b40a01bc5e63691473c0f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "286529a5-e6bc-4702-b8ab-a9aa055d4e87", "node_type": "1", "metadata": {}, "hash": "6cd8e750397de1bd46b5f4e1c39ff541a9dfd50d60303abc17406fd4eee31183", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "-- 3. New Space Listing Procedure\nDELIMITER //\n\nCREATE PROCEDURE NewSpaceListing(\n    IN p_spaceName VARCHAR(255),     -- Space Name\n    IN p_location VARCHAR(100),      -- Location of the space\n    IN p_address VARCHAR(500),       -- Address of the space\n    IN p_size FLOAT,                 -- Size of the space\n    IN p_roomNos INT,                -- Number of rooms in the space\n    IN p_hourlyRate FLOAT,           -- Hourly rental rate\n    IN p_halfdayRate FLOAT,          -- Half-day rental rate\n    IN p_fulldayRate FLOAT,          -- Full-day rental rate\n    IN p_oid INT,                    -- Owner ID (oid)\n    IN p_fid INT,                    -- Facility ID (fid)\n    IN p_rentFrom TIMESTAMP,         -- Rental start time\n    IN p_rentTo TIMESTAMP,           -- Rental end time\n    IN p_status ENUM('open', 'closed'), -- Status (open/closed)\n    IN p_remark TEXT                 -- Remarks about the space\n)\nBEGIN\n    -- Start the transaction\n    START TRANSACTION;\n\n    -- Insert the new space listing\n    INSERT INTO space (\n        name, location, address, size, numRooms, fid, hourlyRate, \n        halfdayRate, fulldayRate, rentFrom, rentTo, \n        status, remark, oid, createdAt, updatedAt\n    )\n    VALUES (\n        p_spaceName, p_location, p_address, p_size, p_roomNos, p_fid, \n        p_hourlyRate, p_halfdayRate, p_fulldayRate, p_rentFrom, \n        p_rentTo, p_status, p_remark, p_oid, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP\n    );\n\n    -- Commit the transaction\n    COMMIT;\n\n    -- Optionally, retrieve the inserted space details\n    SELECT * FROM space WHERE name = p_spaceName;\n\nEND//\n\nDELIMITER ;\n\n-- Call to add a new space listing\nCALL NewSpaceListing(\n    'Modern Conference Room',        -- Space Name\n    'Downtown, City X',              -- Location\n    '123 Conference St, City X',     -- Address\n    300.5,                           -- Size (in square feet or meters)\n    3,                               -- Number of rooms\n    100.00,                          -- Hourly Rate\n    250.00,                          -- Half-day Rate\n    400.00,                          -- Full-day Rate\n    1,                               -- Owner ID (oid)\n    2,                               -- Facility ID (fid)\n    '2025-02-05 09:00:00',           -- Rent Start Time\n    '2025-02-10 17:00:00',           -- Rent End Time\n    'open',                          -- Status\n    'Great space for events.'        -- Remark\n);\n\n\n-- 1. Owner Review Feedback Query (specific owner)\nSELECT \n    s.name AS spaceName, \n    u.name AS CustomerName, \n    f.rating, \n    f.reviews, \n    f.createdAt \nFROM feedback f\nJOIN user u ON f.cid = u.id\nJOIN space s ON f.sid = s.id\nWHERE s.oid = 5;  -- Filtering by the owner's ID\n\n\n-- 2. Editing a Booking (status) Query\n-- TO CANCEL\nUPDATE booking \nSET status = 'cancelled', updatedAt = CURRENT_TIMESTAMP \nWHERE id = 5;\n\nSELECT \n    b.id, \n    s.name AS spaceName, \n    b.status, \n    b.bookingDate, \n    b.startTime, \n    b.endTime \nFROM booking b\nJOIN space s ON b.sid = s.id\nWHERE b.id = 5;\n\n\n-- TO MODIFY\nUPDATE booking \nSET status = 'Available', updatedAt = CURRENT_TIMESTAMP \nWHERE id = 5;\n\n-- 3. Recently Listed Spaces Query\nSELECT \n    id, \n    name, \n    location, \n    address, \n    size, \n    numRooms, \n    hourlyRate, \n    halfdayRate, \n    fulldayRate, \n    rating, \n    createdAt \nFROM space \nORDER BY createdAt DESC \nLIMIT 10;", "mimetype": "text/plain", "start_char_idx": 16946, "end_char_idx": 20332, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "286529a5-e6bc-4702-b8ab-a9aa055d4e87": {"__data__": {"id_": "286529a5-e6bc-4702-b8ab-a9aa055d4e87", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86459bf3-4778-41a9-a2c1-e49ca44eb249", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "921b0b5c74d6160963eea44a18634bd42d16289f0e9f117fcdfbdda025524a52", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f9b31c75-a8e8-48a6-a7c2-9b7bd6a88182", "node_type": "1", "metadata": {}, "hash": "7ccc15a326b46c3376a97b6aaa4256276bf78e25a4a201a04ff0a11b88a17760", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "-- 2. Editing a Booking (status) Query\n-- TO CANCEL\nUPDATE booking \nSET status = 'cancelled', updatedAt = CURRENT_TIMESTAMP \nWHERE id = 5;\n\nSELECT \n    b.id, \n    s.name AS spaceName, \n    b.status, \n    b.bookingDate, \n    b.startTime, \n    b.endTime \nFROM booking b\nJOIN space s ON b.sid = s.id\nWHERE b.id = 5;\n\n\n-- TO MODIFY\nUPDATE booking \nSET status = 'Available', updatedAt = CURRENT_TIMESTAMP \nWHERE id = 5;\n\n-- 3. Recently Listed Spaces Query\nSELECT \n    id, \n    name, \n    location, \n    address, \n    size, \n    numRooms, \n    hourlyRate, \n    halfdayRate, \n    fulldayRate, \n    rating, \n    createdAt \nFROM space \nORDER BY createdAt DESC \nLIMIT 10;\n\n\n-- 4. Most Popular Spaces by Booking Frequency\nSELECT \n    s.id, \n    s.name, \n    s.location, \n    s.address, \n    s.hourlyRate, \n    s.halfdayRate, \n    s.fulldayRate, \n    s.rating, \n    COUNT(b.id) AS booking_count\nFROM space s\nJOIN booking b ON s.id = b.sid\nWHERE b.status = 'booked'\nGROUP BY s.id, s.name, s.location, s.address, s.hourlyRate, s.halfdayRate, s.fulldayRate, s.rating\nORDER BY booking_count DESC\nLIMIT 10;\n\n\n-- 5. Popular Booking Time Slots\nSELECT \n    TIME_FORMAT(startTime, '%H:00') AS time_slot,\n    COUNT(id) AS booking_count\nFROM booking\nWHERE status = 'booked'\nGROUP BY time_slot\nORDER BY booking_count DESC\nLIMIT 10;\n\n\n-- 4. Truong Vuong\n\n### TRANSACTION\n1. Space Status Update\nDELIMITER //\n\nCREATE PROCEDURE UpdateSpaceStatus(IN spaceId INT, IN newStatus ENUM('open', 'closed'), IN newRemark TEXT)\nBEGIN\n    UPDATE space\n    SET status = newStatus, remark = newRemark\n    WHERE id = spaceId;\nEND //\n\nDELIMITER ;\nCALL UpdateSpaceStatus(1, 'closed', 'Under maintenance');\n\n2. Space Removal\nDELIMITER //\n\nCREATE PROCEDURE TemporarilyRemoveSpace(IN spaceId INT)\nBEGIN\n    UPDATE space\n    SET status = 'closed', remark = 'Temporarily removed due to safety concerns'\n    WHERE id = spaceId;\nEND //\n\nCREATE PROCEDURE PermanentlyRemoveSpace(IN spaceId INT)\nBEGIN\n    DELETE FROM space\n    WHERE id = spaceId;\nEND //\n\nDELIMITER ;\nCALL TemporarilyRemoveSpace(2);\nCALL PermanentlyRemoveSpace(10);\n\n3. Promotional Offers\nDELIMITER //\n\nCREATE PROCEDURE UpdateBookingDiscount(IN bookingId INT, IN discountPercentage FLOAT)\nBEGIN\n    UPDATE booking\n    SET discount = discountPercentage\n    WHERE id = bookingId;\nEND //\n\nDELIMITER ;\nCALL UpdateBookingDiscount(4, 20);\n\n-- =======================================================================================================================================\n# QUERIES & REPORT\n1. Customer Retention Report\nDELIMITER //\n\nCREATE PROCEDURE CustomerRetentionReport()\nBEGIN\n    SELECT  \n        u.name AS CustomerName,\n        COUNT(b.id) AS TotalBookings,\n        ROUND(COALESCE(SUM(b.total), 2), 2) AS TotalSpend,\n        MAX(b.bookingDate) AS LastBookingDate,\n        CASE \n            WHEN COUNT(b.id) >= 3 THEN 'Loyal'\n            ELSE 'At Risk' \n        END AS RetentionStatus\n    FROM user u\n    LEFT JOIN booking b ON u.id = b.cid\n    WHERE u.isCustomer = TRUE\n    GROUP BY u.id, u.name\n    ORDER BY TotalBookings DESC;\nEND //\n\nDELIMITER ;\nCALL CustomerRetentionReport();\n\n2.", "mimetype": "text/plain", "start_char_idx": 19671, "end_char_idx": 22777, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9b31c75-a8e8-48a6-a7c2-9b7bd6a88182": {"__data__": {"id_": "f9b31c75-a8e8-48a6-a7c2-9b7bd6a88182", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "286529a5-e6bc-4702-b8ab-a9aa055d4e87", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "c7171a291bdfd69c29c677c1794df7277f38979ce668b192d5d788f1567380ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86c790dc-b97f-4992-b5e2-43a1e7a245da", "node_type": "1", "metadata": {}, "hash": "6f9f0e6ee8d32ec68dc63a9eef3881ca6960a64cb5cafdf51ea3db2459129786", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Customer Retention Report\nDELIMITER //\n\nCREATE PROCEDURE CustomerRetentionReport()\nBEGIN\n    SELECT  \n        u.name AS CustomerName,\n        COUNT(b.id) AS TotalBookings,\n        ROUND(COALESCE(SUM(b.total), 2), 2) AS TotalSpend,\n        MAX(b.bookingDate) AS LastBookingDate,\n        CASE \n            WHEN COUNT(b.id) >= 3 THEN 'Loyal'\n            ELSE 'At Risk' \n        END AS RetentionStatus\n    FROM user u\n    LEFT JOIN booking b ON u.id = b.cid\n    WHERE u.isCustomer = TRUE\n    GROUP BY u.id, u.name\n    ORDER BY TotalBookings DESC;\nEND //\n\nDELIMITER ;\nCALL CustomerRetentionReport();\n\n2. Space Utilization Efficiency Report\nDELIMITER //\n\nCREATE PROCEDURE SpaceUtilizationEfficiencyReport()\nBEGIN\n    SELECT  \n        s.name AS SpaceName,\n        s.location AS Location,\n        COUNT(b.id) AS TotalBookings,\n        TIMESTAMPDIFF(HOUR, s.rentFrom, s.rentTo) AS AvailableHours,\n        CASE \n            WHEN TIMESTAMPDIFF(HOUR, s.rentFrom, s.rentTo) > 0 \n            THEN ROUND((COUNT(b.id) / TIMESTAMPDIFF(HOUR, s.rentFrom, s.rentTo)) * 100, 2) \n            ELSE 0 \n        END AS UtilizationRate\n    FROM space s\n    LEFT JOIN booking b ON s.id = b.sid\n    GROUP BY s.id, s.name, s.location, s.rentFrom, s.rentTo\n    ORDER BY UtilizationRate DESC;\nEND //\n\nDELIMITER ;\nCALL SpaceUtilizationEfficiencyReport();\n\n3. Customer Feedback Sentiment Report\nDELIMITER //\n\nCREATE PROCEDURE CustomerFeedbackSentimentReport()\nBEGIN\n    SELECT  \n        s.name AS SpaceName,\n        s.location AS Location,\n        COUNT(f.id) AS TotalReviews,\n        CASE \n            WHEN COUNT(f.id) > 0 \n            THEN ROUND(SUM(CASE WHEN f.rating >= 4 THEN 1 ELSE 0 END) / COUNT(f.id) * 100, 2) \n            ELSE 0 \n        END AS PositiveSentimentPercentage,\n        CASE \n            WHEN COUNT(f.id) > 0 \n            THEN ROUND(SUM(CASE WHEN f.rating >= 3 AND f.rating < 4 THEN 1 ELSE 0 END) / COUNT(f.id) * 100, 2) \n            ELSE 0 \n        END AS NeutralSentimentPercentage,\n        CASE \n            WHEN COUNT(f.id) > 0 \n            THEN ROUND(SUM(CASE WHEN f.rating < 3 THEN 1 ELSE 0 END) / COUNT(f.id) * 100, 2) \n            ELSE 0 \n        END AS NegativeSentimentPercentage,\n        ROUND(AVG(f.rating), 2) AS AverageRating\n    FROM feedback f\n    JOIN space s ON f.sid = s.id\n    GROUP BY s.id, s.name, s.location\n    ORDER BY AverageRating DESC;\nEND //\n\nDELIMITER ;\nCALL CustomerFeedbackSentimentReport();\n\n4. Booking Trends by Season Report\nDELIMITER //\n\nCREATE PROCEDURE BookingTrendsBySeasonReport()\nBEGIN\n    SELECT \n        CASE \n            WHEN MONTH(b.bookingDate) IN (12, 1, 2) THEN 'Winter'\n            WHEN MONTH(b.bookingDate) IN (3, 4, 5) THEN 'Spring'\n            WHEN MONTH(b.bookingDate) IN (6, 7, 8) THEN 'Summer'\n            WHEN MONTH(b.bookingDate) IN (9, 10, 11) THEN 'Fall'\n        END AS Season,\n        COUNT(b.id) AS TotalBookings,\n        ROUND(SUM((b.spacePrice * (100 - b.discount) / 100)), 2) AS TotalOwnerRevenue, -- After applying discount\n        ROUND(SUM(b.sysFee), 2) AS TotalBookingFee\n    FROM booking b\n    GROUP BY Season\n    ORDER BY TotalBookings DESC;\nEND //\n\nDELIMITER ;\nCALL BookingTrendsBySeasonReport();\n\n5. Space Availability vs.", "mimetype": "text/plain", "start_char_idx": 22179, "end_char_idx": 25361, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "86c790dc-b97f-4992-b5e2-43a1e7a245da": {"__data__": {"id_": "86c790dc-b97f-4992-b5e2-43a1e7a245da", "embedding": null, "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f0fd59-f6c8-437a-afdc-2bba713ceff7", "node_type": "4", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "d1776da2993d8390e38c54b0ee704c2e783e74cb836af0e5d84fae7a8f543640", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f9b31c75-a8e8-48a6-a7c2-9b7bd6a88182", "node_type": "1", "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}, "hash": "00c1e0e75a069962097d045d1ab7eeefb73c4a3f4b63500e54dc3adfb82a8a56", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Space Availability vs. Demand Report\nDELIMITER //\n\nCREATE PROCEDURE SpaceAvailabilityVsDemandReport()\nBEGIN\n    SELECT \n        s.name AS SpaceName,\n        s.location AS Location,\n        ROUND(SUM((b.spacePrice * (100 - b.discount) / 100)), 2) AS TotalRevenue,\n        COUNT(b.id) AS TotalBookings,\n        ROUND(AVG((b.spacePrice * (100 - b.discount) / 100)), 2) AS AvgBookingRate,\n        CASE\n            WHEN COUNT(b.id) > 5 THEN 'High Demand'\n            WHEN COUNT(b.id) BETWEEN 2 AND 5 THEN 'Moderate Demand'\n            ELSE 'Low Demand'\n        END AS PerformanceStatus\n    FROM \n        space s\n    LEFT JOIN \n        booking b ON s.id = b.sid\n    GROUP BY \n        s.id\n    ORDER BY \n        TotalRevenue DESC;\nEND //\n\nDELIMITER ;\nCALL SpaceAvailabilityVsDemandReport();", "mimetype": "text/plain", "start_char_idx": 25339, "end_char_idx": 26122, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"69c88887-b7e1-431a-a7d8-010a994c4b14": {"node_ids": ["7a0a5b25-e669-456b-ba1b-cb2c0ad85cb4"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\1.txt", "file_name": "1.txt", "file_type": "text/plain", "file_size": 3459, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "bc912c52-df5b-4ba7-9242-aee3fb27d2f2": {"node_ids": ["48ff6902-1cc6-48c1-a361-7494d46cca66"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\2.txt", "file_name": "2.txt", "file_type": "text/plain", "file_size": 2562, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "3c5e369f-881b-43a1-9a44-d119617fcd43": {"node_ids": ["d2304d83-b2c0-4670-a83a-e8332e48e630"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\3.txt", "file_name": "3.txt", "file_type": "text/plain", "file_size": 2625, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "29348aa4-b3d2-47e1-8c48-b66ed077fff9": {"node_ids": ["f7c37569-1321-4a5b-94d8-d53b80781447"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\4.txt", "file_name": "4.txt", "file_type": "text/plain", "file_size": 2276, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "551bc74d-be47-49de-96f5-eed472d63d4f": {"node_ids": ["1882b4be-79f8-4aec-8abb-868072e7eff7"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\5.txt", "file_name": "5.txt", "file_type": "text/plain", "file_size": 2977, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "3a1fe2b5-6629-4406-9765-6684f7264e66": {"node_ids": ["848fde15-a655-404a-98ac-f05b794cb82d"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\6.txt", "file_name": "6.txt", "file_type": "text/plain", "file_size": 2787, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "d0df5633-52a2-45a4-978d-8417f9fdca26": {"node_ids": ["3b2912cd-089f-411e-b84b-d0c8be79ddbb"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\7.txt", "file_name": "7.txt", "file_type": "text/plain", "file_size": 3027, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "72e4f38d-dc31-45ac-9e2e-fbf5ca97b5f7": {"node_ids": ["3fd01c27-539a-4213-ae55-1cae12566f52"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\8.txt", "file_name": "8.txt", "file_type": "text/plain", "file_size": 2512, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "df639b0c-6314-432b-a12a-f12399dc5202": {"node_ids": ["b708c3f9-cebf-4b0e-925d-1479156bd705"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_BookSpace.txt", "file_name": "sp_BookSpace.txt", "file_type": "text/plain", "file_size": 1207, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "8bcfed0c-7999-4db3-8fbd-1ffd24c48dce": {"node_ids": ["17a3a7df-0590-4ac0-851a-499f82078fe4"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_MonthlyRevenue.txt", "file_name": "sp_MonthlyRevenue.txt", "file_type": "text/plain", "file_size": 745, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "1aecb44f-a1e8-4162-b4db-a5a6f07c05e9": {"node_ids": ["30f4cf98-6429-4a5b-9c45-20e660377943"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_MostSpender.txt", "file_name": "sp_MostSpender.txt", "file_type": "text/plain", "file_size": 1044, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "dfa9168f-b92d-4d4b-8a52-f1d1c1dd2a61": {"node_ids": ["21725773-5825-4f02-882a-f3dd0ac2335f"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_PayCharge.txt", "file_name": "sp_PayCharge.txt", "file_type": "text/plain", "file_size": 914, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "8010df7a-68b8-4199-ad04-c24767c7bb37": {"node_ids": ["31fc4c62-15c9-4568-b8b3-ec794c2ffa20"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_PopularDay.txt", "file_name": "sp_PopularDay.txt", "file_type": "text/plain", "file_size": 771, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "915569a2-cf82-44ec-961a-36ccac3a8f26": {"node_ids": ["7126e381-3df7-48cd-947e-f1af23786aff"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_RangeBook.txt", "file_name": "sp_RangeBook.txt", "file_type": "text/plain", "file_size": 1358, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "06a0734e-33fd-40b5-9a43-4a045b05e80c": {"node_ids": ["15549607-dda2-47dc-8508-16cdf4e61c68"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_SpaceRecommend.txt", "file_name": "sp_SpaceRecommend.txt", "file_type": "text/plain", "file_size": 1718, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "9eda0a4e-bedf-4f6b-a9a0-b29d50e7f020": {"node_ids": ["0e0c817a-d462-4c11-ba20-2d19937ab6d9"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\sp_UserRegistration.txt", "file_name": "sp_UserRegistration.txt", "file_type": "text/plain", "file_size": 837, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}, "78f0fd59-f6c8-437a-afdc-2bba713ceff7": {"node_ids": ["c039a98c-344f-4be4-a3b0-24b695725a9c", "e6157ca8-3943-4a02-9737-f59d907e8197", "1e1ff4d1-4d43-442d-a25e-6f1243a6712f", "62c6507d-1a3e-4e88-8c40-d5ec3131116a", "a02fd073-cce9-47df-adb9-1d4e349b0829", "c1d61768-560c-4f6f-b709-f0a87ee50586", "f7d63f86-7bda-4432-bcd0-9095eff12693", "86459bf3-4778-41a9-a2c1-e49ca44eb249", "286529a5-e6bc-4702-b8ab-a9aa055d4e87", "f9b31c75-a8e8-48a6-a7c2-9b7bd6a88182", "86c790dc-b97f-4992-b5e2-43a1e7a245da"], "metadata": {"file_path": "d:\\AIT_lecture\\NLP\\NLU_Project2025\\system_expert_bot\\R&D\\ourspace\\TransacAndQuery_DataScape.sql", "file_name": "TransacAndQuery_DataScape.sql", "file_size": 26123, "creation_date": "2025-04-26", "last_modified_date": "2025-04-26"}}}}